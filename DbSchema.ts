
import { z } from "zod";

export type DbSchema = {
  "cron": {
      "job": {
            jobid: string;
schedule: string;
command: string;
nodename: string;
nodeport: number;
database: string;
username: string;
active: boolean;
jobname: string;
        },"job_run_details": {
            jobid: string;
runid: string;
job_pid: number;
database: string;
username: string;
command: string;
status: string;
return_message: string;
start_time: Date;
end_time: Date;
        }
    },"github": {
      "card": {
            id: string;
note: string;
archived: boolean;
created_at: Date;
updated_at: Date;
issue_id: string;
is_deleted: boolean;
column_id: string;
creator_id: string;
_fivetran_synced: Date;
        },"column": {
            id: string;
name: string;
created_at: Date;
updated_at: Date;
is_deleted: boolean;
project_id: string;
_fivetran_synced: Date;
        },"commit": {
            sha: string;
repository_id: string;
author_date: Date;
committer_date: Date;
author_email: string;
author_name: string;
committer_email: string;
committer_name: string;
message: string;
_fivetran_synced: Date;
        },"commit_file": {
            commit_sha: string;
filename: string;
additions: string;
deletions: string;
changes: string;
status: string;
_fivetran_synced: Date;
        },"commit_parent": {
            commit_sha: string;
parent_sha: string;
_fivetran_synced: Date;
        },"fivetran_audit": {
            id: string;
message: string;
update_started: Date;
update_id: string;
schema: string;
table: string;
start: Date;
done: Date;
rows_updated_or_inserted: string;
status: string;
progress: Date;
_fivetran_synced: Date;
        },"issue": {
            id: string;
number: string;
state: string;
title: string;
body: string;
locked: boolean;
closed_at: Date;
created_at: Date;
updated_at: Date;
repository_id: string;
milestone_id: string;
pull_request: boolean;
user_id: string;
_fivetran_synced: Date;
        },"issue_assignee": {
            issue_id: string;
user_id: string;
_fivetran_synced: Date;
        },"issue_assignee_history": {
            issue_id: string;
updated_at: Date;
user_id: string;
assigned: boolean;
assigner_id: string;
_fivetran_synced: Date;
        },"issue_closed_history": {
            issue_id: string;
updated_at: Date;
closed: boolean;
actor_id: string;
commit_sha: string;
_fivetran_synced: Date;
        },"issue_comment": {
            id: string;
issue_id: string;
body: string;
created_at: Date;
updated_at: Date;
user_id: string;
_fivetran_synced: Date;
        },"issue_label": {
            issue_id: string;
label: string;
_fivetran_synced: Date;
        },"issue_label_history": {
            issue_id: string;
label: string;
updated_at: Date;
labeled: boolean;
actor_id: string;
_fivetran_synced: Date;
        },"issue_mention": {
            issue_id: string;
updated_at: Date;
user_id: string;
_fivetran_synced: Date;
        },"issue_merged": {
            commit_sha: string;
issue_id: string;
merged_at: Date;
actor_id: string;
_fivetran_synced: Date;
        },"issue_milestone_history": {
            issue_id: string;
updated_at: Date;
milestone_id: string;
milestoned: boolean;
actor_id: string;
_fivetran_synced: Date;
        },"issue_project_history": {
            issue_id: string;
project_id: string;
updated_at: Date;
card_id: string;
removed: boolean;
column_name: string;
previous_column_name: string;
actor_id: string;
_fivetran_synced: Date;
        },"issue_referenced": {
            issue_id: string;
referenced_at: Date;
commit_sha: string;
actor_id: string;
_fivetran_synced: Date;
        },"issue_renamed": {
            issue_id: string;
updated_at: Date;
from_name: string;
to_name: string;
actor_id: string;
_fivetran_synced: Date;
        },"milestone": {
            id: string;
number: string;
state: string;
title: string;
description: string;
is_deleted: boolean;
created_at: Date;
updated_at: Date;
closed_at: Date;
due_on: Date;
repository_id: string;
creator_id: string;
_fivetran_synced: Date;
        },"project": {
            id: string;
number: string;
name: string;
body: string;
state: string;
created_at: Date;
updated_at: Date;
repository_id: string;
is_deleted: boolean;
creator_id: string;
_fivetran_synced: Date;
        },"pull_request": {
            id: string;
issue_id: string;
merge_commit_sha: string;
head_label: string;
head_ref: string;
head_sha: string;
head_repo_id: string;
head_user_id: string;
base_label: string;
base_ref: string;
base_sha: string;
base_repo_id: string;
base_user_id: string;
_fivetran_synced: Date;
draft: boolean;
        },"pull_request_review": {
            id: string;
pull_request_id: string;
body: string;
submitted_at: Date;
state: string;
user_id: string;
commit_sha: string;
_fivetran_synced: Date;
        },"pull_request_review_dismissed": {
            pull_request_review_id: string;
dismissal_message: string;
created_at: Date;
state: string;
actor_id: string;
dismissal_commit_sha: string;
_fivetran_synced: Date;
        },"repo_team": {
            repository_id: string;
team_id: string;
permission: string;
_fivetran_synced: Date;
        },"repository": {
            id: string;
name: string;
full_name: string;
description: string;
fork: boolean;
archived: boolean;
homepage: string;
language: string;
default_branch: string;
created_at: Date;
owner_id: string;
private: boolean;
_fivetran_synced: Date;
        },"requested_reviewer_history": {
            created_at: Date;
pull_request_id: string;
requested_id: string;
actor_id: string;
removed: boolean;
_fivetran_synced: Date;
        },"team": {
            id: string;
name: string;
slug: string;
description: string;
privacy: string;
org_id: string;
parent_id: string;
_fivetran_synced: Date;
        },"team_membership": {
            team_id: string;
user_id: string;
_fivetran_synced: Date;
        },"user": {
            id: string;
login: string;
type: string;
site_admin: boolean;
name: string;
company: string;
blog: string;
location: string;
hireable: boolean;
bio: string;
created_at: Date;
updated_at: Date;
_fivetran_synced: Date;
        },"user_email": {
            email: string;
user_id: string;
name: string;
_fivetran_synced: Date;
        }
    },"hdb_catalog": {
      "event_invocation_logs": {
            id: string;
event_id: string;
status: number;
request: { [key: string]: unknown } | object;
response: { [key: string]: unknown } | object;
created_at: Date;
        },"event_log": {
            id: string;
schema_name: string;
table_name: string;
trigger_name: string;
payload: { [key: string]: unknown } | object;
delivered: boolean;
error: boolean;
tries: number;
created_at: Date;
locked: Date;
next_retry_at: Date;
archived: boolean;
        },"hdb_action_log": {
            id: string;
action_name: string;
input_payload: { [key: string]: unknown } | object;
request_headers: { [key: string]: unknown } | object;
session_variables: { [key: string]: unknown } | object;
response_payload: { [key: string]: unknown } | object;
errors: { [key: string]: unknown } | object;
created_at: Date;
response_received_at: Date;
status: string;
        },"hdb_cron_event_invocation_logs": {
            id: string;
event_id: string;
status: number;
request: { [key: string]: unknown } | object;
response: { [key: string]: unknown } | object;
created_at: Date;
        },"hdb_cron_events": {
            id: string;
trigger_name: string;
scheduled_time: Date;
status: string;
tries: number;
created_at: Date;
next_retry_at: Date;
        },"hdb_metadata": {
            id: number;
metadata: { [key: string]: unknown } | object;
resource_version: number;
        },"hdb_scheduled_event_invocation_logs": {
            id: string;
event_id: string;
status: number;
request: { [key: string]: unknown } | object;
response: { [key: string]: unknown } | object;
created_at: Date;
        },"hdb_scheduled_events": {
            id: string;
webhook_conf: { [key: string]: unknown } | object;
scheduled_time: Date;
retry_conf: { [key: string]: unknown } | object;
payload: { [key: string]: unknown } | object;
header_conf: { [key: string]: unknown } | object;
status: string;
tries: number;
created_at: Date;
next_retry_at: Date;
comment: string;
        },"hdb_schema_notifications": {
            id: number;
notification: { [key: string]: unknown } | object;
resource_version: number;
instance_id: string;
updated_at: Date;
        },"hdb_source_catalog_version": {
            version: string;
upgraded_on: Date;
        },"hdb_version": {
            hasura_uuid: string;
version: string;
upgraded_on: Date;
cli_state: { [key: string]: unknown } | object;
console_state: { [key: string]: unknown } | object;
        }
    },"oban": {
      "oban_crons": {
            name: string;
expression: string;
worker: string;
opts: { [key: string]: unknown } | object;
paused: boolean;
lock_version: number;
inserted_at: Date;
updated_at: Date;
        },"oban_jobs": {
            id: string;
state: "This type is missing in the generator mapping, plz fix.";
queue: string;
worker: string;
args: { [key: string]: unknown } | object;
errors: { [key: string]: unknown } | object;
attempt: number;
max_attempts: number;
inserted_at: Date;
scheduled_at: Date;
attempted_at: Date;
completed_at: Date;
attempted_by: string;
discarded_at: Date;
priority: number;
tags: string;
meta: { [key: string]: unknown } | object;
cancelled_at: Date;
        },"oban_peers": {
            name: string;
node: string;
started_at: Date;
expires_at: Date;
        }
    },"public": {
      "activities": {
            id: string;
title: string;
status: string;
related_entity: string;
ticket_id: string;
instance_id: string;
assigned_user_id: string;
inserted_at: Date;
updated_at: Date;
        },"admin": {
            id: string;
userId: number;
userLogin: string;
        },"agencies": {
            id: string;
name: string;
userDomains: string;
createdAt: Date;
updatedAt: Date;
legalName: string;
addressAddress: { [key: string]: unknown } | object;
sid: string;
        },"agency_invoices": {
            id: number;
createdAt: Date;
updatedAt: Date;
invoiceCode: string;
costInUSD: number;
dueAt: Date;
agencyId: string;
deletedAt: Date;
        },"agency_payment_types": {
            id: string;
description: string;
        },"agency_payments": {
            id: number;
createdAt: Date;
finishedAt: Date;
amountInUSD: number;
channelTransactionId: string;
status: string;
agencyId: string;
paymentType: string;
        },"agency_payments_status": {
            id: string;
description: string;
        },"agency_user_roles": {
            id: string;
description: string;
        },"agency_users": {
            agencyId: string;
userId: number;
id: string;
role: string;
        },"auth_settings": {
            id: number;
provider: string;
name: string;
createdAt: Date;
updatedAt: Date;
value: string;
        },"blockers": {
            id: string;
type: string;
resolved_at: Date;
ticket_id: string;
pull_request_id: string;
pull_request_estimate_id: string;
resolved_by_user_id: string;
inserted_at: Date;
updated_at: Date;
        },"bonus_types": {
            type: string;
description: string;
        },"bot_platform_types": {
            id: string;
description: string;
        },"bots": {
            createdAt: Date;
updatedAt: Date;
id: number;
githubAccountSid: string;
gitlabUserSid: string;
jiraAccountSid: string;
linearAccountSid: string;
platformId: string;
clientBotId: number;
deletedAt: Date;
        },"candidate_stage": {
            type: string;
        },"career_ladder_levels": {
            id: string;
description: string;
        },"clickup_apps": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
sid: string;
name: string;
clientId: string;
webhookSid: string;
clientSecret: string;
authCode: string;
apiToken: string;
accessToken: string;
syncEntityId: number;
teamSid: string;
        },"clickup_folders": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
sid: string;
name: string;
orderindex: number;
ovverrideStatuses: boolean;
hidden: boolean;
taskCount: string;
archive: boolean;
syncEntityId: number;
spaceSid: string;
teamSid: string;
        },"clickup_lists": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
sid: string;
name: string;
orderindex: number;
priority: string;
assignee: string;
taskCount: number;
dueDate: Date;
startDate: Date;
archive: boolean;
override_statuses: boolean;
syncEntityId: number;
spaceSid: string;
folderSid: string;
teamSid: string;
        },"clickup_spaces": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
sid: string;
name: string;
private: boolean;
spaceStatuses: { [key: string]: unknown } | object;
multipleAssignees: boolean;
features: string;
archive: boolean;
syncEntityId: number;
teamSid: string;
        },"clickup_task_comments": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
sid: string;
name: string;
textContent: string;
syncEntityId: number;
taskSid: string;
userSid: string;
discussionCommentId: number;
        },"clickup_task_status_types": {
            id: string;
description: string;
        },"clickup_tasks": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
sid: string;
name: string;
textContent: string;
description: string;
status: string;
clickupTaskAssignedSids: { [key: string]: unknown } | object;
clickupTaskWatechedSids: { [key: string]: unknown } | object;
tags: string;
priority: string;
archive: boolean;
syncEntityId: number;
taskStatusType: string;
creatorSid: string;
listSid: string;
discussionSourceId: number;
        },"clickup_teams": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
sid: string;
name: string;
avatar: string;
accessClickupMembers: { [key: string]: unknown } | object;
syncEntityId: number;
        },"clickup_users": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
sid: string;
name: string;
email: string;
profilePicture: string;
initials: string;
syncEntityId: number;
        },"client_billing_aggregated_structure": {
            occuredAt: Date;
costInCredits: number;
type: string;
clientId: string;
clientInvoiceId: number;
clientTransactionId: number;
status: string;
        },"client_blocker_status": {
            type: string;
description: string;
        },"client_blockers": {
            id: number;
summary: string;
details: string;
clientId: string;
createdAt: Date;
updatedAt: Date;
status: string;
projectId: number;
unblockDetails: string;
deletedAt: Date;
resolvedById: number;
        },"client_bot_types": {
            id: string;
description: string;
        },"client_bots": {
            id: number;
username: string;
password: string;
clientId: string;
token: string;
accessEndpoint: string;
verified: boolean;
typeId: string;
        },"client_changes": {
            changeId: string;
previousChangeId: string;
automaticallyChanged: boolean;
operation: string;
sqlQuery: string;
reasonForChange: string;
changeCreatedAt: Date;
createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: string;
stripeCustomerId: string;
billingEmail: string;
primaryPhoneNumber: string;
intercomCompanyId: string;
onBoardedAt: Date;
churnedAt: Date;
logoUrl: string;
creditBatchSize: number;
name: string;
legalName: string;
defaultCreditBudget: number;
userDomains: string;
changedByUserId: number;
assignedEntityName: string;
agencyId: string;
discussionSourceId: number;
addressAddress: { [key: string]: unknown } | object;
        },"client_daily_standups": {
            id: number;
createdAt: Date;
updatedAt: Date;
summary: string;
submittedAt: string;
userId: number;
clientId: string;
summarizedInUserDailyStandupId: number;
messageForClient: string;
postedToClient: boolean;
deletedAt: Date;
errorMessage: string;
erroredAt: Date;
        },"client_feature_flags": {
            id: number;
clientId: string;
featureFlagId: number;
        },"client_invoice_changes": {
            changeId: string;
previousChangeId: string;
automaticallyChanged: boolean;
operation: string;
sqlQuery: string;
reasonForChange: string;
changeCreatedAt: Date;
createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
costInUSD: number;
invoiceCode: string;
costInCredits: number;
startAt: Date;
endAt: Date;
maxBudgetInCredits: number;
dueAt: Date;
changedByUserId: number;
clientId: string;
associatedTransactionId: number;
creditPricingPlanId: number;
isTopUp: boolean;
        },"client_invoices": {
            id: number;
costInUSD: number;
costInCredits: number;
dueAt: Date;
clientId: string;
maxBudgetInCredits: number;
createdAt: Date;
updatedAt: Date;
startAt: Date;
endAt: Date;
invoiceCode: string;
associatedTransactionId: number;
deletedAt: Date;
creditPricingPlanId: number;
isTopUp: boolean;
        },"client_jobs": {
            id: string;
isRemote: boolean;
qualifiedCities: string;
qualifiedCountries: string;
qualifiedTimezoneOverlap: number;
workTimeZone: number;
totalPlacements: number;
earliestStartDate: Date;
minQualifiedRank: number;
canSponsorVisa: boolean;
maxAnnualSalary: number;
linkToJobDescription: string;
clientId: string;
        },"client_monthly_invoice_items": {
            id: string;
amount_in_usd: number;
description: string;
metadata: { [key: string]: unknown } | object;
client_monthly_invoice_id: string;
instance_id: string;
inserted_at: Date;
updated_at: Date;
        },"client_monthly_invoices": {
            id: string;
start_date: Date;
end_date: Date;
due_date: Date;
client_id: string;
inserted_at: Date;
updated_at: Date;
        },"client_pricing_plans": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
startAt: Date;
endAt: Date;
clientId: string;
creditPricingPlanId: number;
        },"client_project_changes": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
name: string;
description: string;
internalSlackChannelSid: string;
clientId: string;
discussionSourceId: number;
repositoriesId: number;
usersId: number;
technologiesId: number;
changeId: string;
previousChangeId: string;
automaticallyChanged: boolean;
operation: string;
sqlQuery: string;
reasonForChange: string;
changeCreatedAt: Date;
changedByUserId: number;
type: string;
user_team_id: string;
        },"client_project_managers": {
            id: number;
isShadow: boolean;
startAt: Date;
endAt: Date;
clientProjectId: number;
projectManagerUserId: number;
        },"client_project_pricing_plans": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
startAt: Date;
endAt: Date;
clientProjectId: number;
creditPricingPlanId: number;
        },"client_project_repositories": {
            clientProjectsId: number;
gitReposId: number;
        },"client_project_technologies": {
            projectId: number;
technologyId: number;
        },"client_project_users": {
            projects: number;
users: number;
        },"client_projects": {
            id: number;
createdAt: Date;
updatedAt: Date;
clientId: string;
name: string;
deletedAt: Date;
description: string;
discussionSourceId: number;
internalSlackChannelSid: string;
type: string;
user_team_id: string;
        },"client_transaction_status": {
            id: string;
description: string;
        },"client_transaction_types": {
            id: string;
description: string;
        },"client_transactions": {
            id: number;
transactedAt: Date;
costInUSD: number;
costInCredits: number;
clientId: string;
invoiceCode: string;
status: string;
channelType: string;
channelTransactionId: string;
dueAt: Date;
stripeIntentSecret: string;
initiatedByUserId: number;
transactionError: string;
creditPricingPlanId: number;
        },"client_user_positions": {
            id: string;
description: string;
        },"client_user_roles": {
            id: string;
description: string;
        },"client_users": {
            clientId: string;
userId: number;
id: string;
role: string;
position: string;
        },"clients": {
            id: string;
name: string;
userDomains: string;
agencyId: string;
creditBatchSize: number;
legalName: string;
addressAddress: { [key: string]: unknown } | object;
logoUrl: string;
onBoardedAt: Date;
churnedAt: Date;
createdAt: Date;
updatedAt: Date;
stripeCustomerId: string;
billingEmail: string;
primaryPhoneNumber: string;
intercomCompanyId: string;
assignedEntityName: string;
deletedAt: Date;
defaultCreditBudget: number;
discussionSourceId: number;
        },"competency_types": {
            id: string;
description: string;
        },"countries": {
            code: string;
name: string;
        },"credit_pricing_plan_payment_types": {
            id: string;
description: string;
        },"credit_pricing_plans": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
creditsPerMidLevelHour: number;
costPerCredit: number;
name: string;
minimumCreditPurchase: number;
defaultSLA: number;
discontinuedAt: Date;
isCustomPlan: boolean;
paymentTypeId: string;
minCreditUsagePerWeek: number;
maxFreeSupportHoursPerWeek: number;
        },"description_types": {
            type: string;
description: string;
        },"developer_bonus_earning": {
            id: number;
amountInUSD: number;
bonusType: string;
startDate: Date;
endDate: Date;
userLogin: string;
userInvoiceId: number;
        },"developer_changes": {
            changeId: string;
previousChangeId: string;
automaticallyChanged: boolean;
operation: string;
sqlQuery: string;
reasonForChange: string;
changeCreatedAt: Date;
createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: string;
transferwiseId: string;
targetCurrency: string;
cohort: string;
githubId: string;
minAnnualSalary: number;
timezone: number;
city: string;
country: string;
earliestStartDate: Date;
noticePeriod: number;
yearsOfExperience: number;
source: string;
culture_screen_feedback: string;
tech_screen_feedback: string;
cv: string;
currentMonthlySalary: number;
isActiveStudent: boolean;
canRelocate: boolean;
isActivelyEmployed: boolean;
bio: string;
previousWorkExp: string;
linkedInUrl: string;
codeSampleUrl: string;
appliedAt: Date;
addedToAirtableAt: Date;
failedToAddToAirtableAt: Date;
changedByUserId: number;
login: string;
workMachineOS: string;
agencyId: string;
stage: string;
levelId: string;
        },"developer_daily_log": {
            id: number;
timeLogged: number;
numberOfCommits: number;
workDate: Date;
createdAt: Date;
updatedAt: Date;
developerId: string;
        },"developer_weekly_earning": {
            id: number;
startDate: Date;
endDate: Date;
developerId: string;
amountEarnedWithTasks: number;
minimumAmountEarned: number;
userLogin: string;
        },"developers": {
            id: string;
transferwiseId: string;
targetCurrency: string;
cohort: string;
login: string;
createdAt: Date;
updatedAt: Date;
deletedAt: Date;
githubId: string;
minAnnualSalary: number;
timezone: number;
city: string;
country: string;
earliestStartDate: Date;
noticePeriod: number;
yearsOfExperience: number;
source: string;
culture_screen_feedback: string;
tech_screen_feedback: string;
cv: string;
currentMonthlySalary: number;
isActiveStudent: boolean;
canRelocate: boolean;
isActivelyEmployed: boolean;
agencyId: string;
stage: string;
bio: string;
previousWorkExp: string;
linkedInUrl: string;
codeSampleUrl: string;
workMachineOS: string;
appliedAt: Date;
addedToAirtableAt: Date;
failedToAddToAirtableAt: Date;
levelId: string;
        },"discussion_comment_body_types": {
            id: string;
description: string;
        },"discussion_comment_read_types": {
            id: string;
description: string;
        },"discussion_comment_reads": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
readAt: Date;
readByUserId: number;
readTypeId: string;
discussionCommentId: number;
        },"discussion_comments": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
syncTableName: string;
syncSid: string;
rawBodyText: string;
authorTableName: string;
authorSid: string;
notifiedToRelevantParties: boolean;
rawBodyTypeId: string;
discussionSourceId: number;
authorUserId: number;
parentCommentId: number;
commentedAt: Date;
diffHunk: string;
isResolved: boolean;
errorId: number;
isInternal: boolean;
path: string;
position: number;
originalPosition: number;
outdated: boolean;
        },"discussion_sources": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
syncTableName: string;
syncSid: string;
isInternal: boolean;
resolvedAt: Date;
ticketCode: string;
taskCode: string;
taskTicketCode: string;
        },"errors": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
erroredAt: Date;
error: { [key: string]: unknown } | object;
errorMessage: string;
sentryErrorId: string;
        },"feature_flags": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
name: string;
description: string;
        },"further_reviews": {
            taskReviewsId: number;
tasksId: number;
        },"gcp_storage_buckets": {
            createdAt: Date;
updatedAt: Date;
id: number;
sid: string;
name: string;
syncEntityId: number;
deletedAt: Date;
        },"gcp_storage_objects": {
            createdAt: Date;
updatedAt: Date;
id: number;
sid: string;
filename: string;
bucketId: number;
sha1: string;
sha256: string;
sha512: string;
extension: string;
mimetype: string;
originalFileName: string;
sizeInBytes: number;
authoredAt: Date;
uploadLink: string;
uploadLinkExpiresAt: Date;
creatorId: number;
syncEntityId: number;
readLink: string;
deletedAt: Date;
        },"git_branch_commits": {
            commitId: number;
branchId: number;
        },"git_branch_refs": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
branchName: string;
repoId: number;
syncedAt: Date;
headCommit: string;
        },"git_branches": {
            createdAt: Date;
updatedAt: Date;
id: number;
syncSid: string;
deletedAt: Date;
gitRepoId: number;
branchRef: string;
headCommitId: string;
syncTableName: string;
        },"git_comment_reactions": {
            createdAt: Date;
updatedAt: Date;
id: number;
content: string;
syncSid: string;
pullRequestId: number;
pullRequestReviewId: number;
pullRequestCommentId: number;
pullRequestReviewCommentId: number;
authorId: number;
deletedAt: Date;
syncTableName: string;
        },"git_commit_comments": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
body: string;
position: number;
authorId: number;
commitId: number;
syncSid: string;
syncTableName: string;
discussionCommentId: number;
        },"git_commit_contexts": {
            createdAt: Date;
updatedAt: Date;
id: number;
avatarUrl: string;
context: string;
targetUrl: string;
description: string;
syncSid: string;
status: string;
commitId: number;
deletedAt: Date;
syncTableName: string;
        },"git_commit_slices": {
            createdAt: Date;
updatedAt: Date;
id: number;
slicedAt: Date;
targetCommitId: number;
originCommitId: number;
deletedAt: Date;
        },"git_commit_status": {
            id: string;
description: string;
        },"git_commits": {
            createdAt: Date;
updatedAt: Date;
id: number;
oid: string;
syncSid: string;
status: string;
authorId: number;
shallow: boolean;
deletedAt: Date;
syncTableName: string;
committedAt: Date;
taskId: number;
parentCommits: { [key: string]: unknown } | object;
repoId: number;
message: string;
        },"git_organizations": {
            createdAt: Date;
updatedAt: Date;
id: number;
syncSid: string;
clientId: string;
deletedAt: Date;
syncTableName: string;
        },"git_pull_request_assignees": {
            pullRequestId: number;
assigneeUserId: number;
        },"git_pull_request_changes": {
            changeId: string;
previousChangeId: string;
automaticallyChanged: boolean;
operation: string;
sqlQuery: string;
reasonForChange: string;
changeCreatedAt: Date;
id: number;
createdAt: Date;
updatedAt: Date;
deletedAt: Date;
syncTableName: string;
syncSid: string;
isDraft: boolean;
isMerged: boolean;
mergeable: boolean;
mergedAt: Date;
title: string;
body: string;
number: number;
changedByUserId: number;
repoId: number;
state: string;
authorId: number;
baseBranchRef: string;
targetRepoId: number;
targetBranchRef: string;
baseHeadCommit: string;
targetHeadCommit: string;
discussionSourceId: number;
assignedToReviewGitUsers: { [key: string]: unknown } | object;
assignedGitUsers: { [key: string]: unknown } | object;
ticketId: number;
        },"git_pull_request_comments": {
            createdAt: Date;
updatedAt: Date;
id: number;
body: string;
syncSid: string;
pullRequestId: number;
authorId: number;
deletedAt: Date;
syncTableName: string;
discussionCommentId: number;
        },"git_pull_request_review_comment_state": {
            id: string;
description: string;
        },"git_pull_request_review_comments": {
            createdAt: Date;
updatedAt: Date;
id: number;
body: string;
diffHunk: string;
position: number;
outdated: boolean;
path: string;
originalPosition: number;
commitId: number;
syncSid: string;
originalCommitId: number;
state: string;
pullRequestReviewId: number;
pullRequestReviewThreadId: number;
pullRequestId: number;
replyToCommentId: number;
authorId: number;
deletedAt: Date;
syncTableName: string;
discussionCommentId: number;
        },"git_pull_request_review_state": {
            id: string;
description: string;
        },"git_pull_request_review_threads": {
            createdAt: Date;
updatedAt: Date;
id: number;
isResolved: boolean;
syncSid: string;
pullRequestId: number;
deletedAt: Date;
syncTableName: string;
        },"git_pull_request_reviewers": {
            pullRequestId: number;
reviewerUserId: number;
        },"git_pull_request_reviews": {
            createdAt: Date;
updatedAt: Date;
id: number;
body: string;
syncSid: string;
state: string;
pullRequestId: number;
authorId: number;
deletedAt: Date;
syncTableName: string;
taskReviewId: number;
discussionSourceId: number;
        },"git_pull_request_slice": {
            createdAt: Date;
updatedAt: Date;
id: number;
repoSliceId: number;
basePullRequestId: number;
pushedPullRequestId: number;
deletedAt: Date;
        },"git_pull_request_state": {
            id: string;
description: string;
        },"git_pull_requests": {
            createdAt: Date;
updatedAt: Date;
id: number;
isDraft: boolean;
isMerged: boolean;
mergeable: boolean;
mergedAt: Date;
title: string;
body: string;
syncSid: string;
repoId: number;
state: string;
authorId: number;
deletedAt: Date;
baseBranchRef: string;
targetRepoId: number;
targetBranchRef: string;
baseHeadCommit: string;
targetHeadCommit: string;
syncTableName: string;
number: number;
discussionSourceId: number;
assignedToReviewGitUsers: { [key: string]: unknown } | object;
assignedGitUsers: { [key: string]: unknown } | object;
ticketId: number;
        },"git_repo_changes": {
            changeId: string;
previousChangeId: string;
automaticallyChanged: boolean;
operation: string;
sqlQuery: string;
reasonForChange: string;
changeCreatedAt: Date;
createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
syncTableName: string;
syncSid: string;
description: string;
isFork: boolean;
isArchived: boolean;
isTemplate: boolean;
isDisabled: boolean;
isPrivate: boolean;
isLocked: boolean;
name: string;
owner: string;
authUrl: string;
changedByUserId: number;
source: string;
organizationId: number;
clientId: string;
accessGitUserIds: { [key: string]: unknown } | object;
        },"git_repo_slice_changes": {
            changeId: string;
previousChangeId: string;
automaticallyChanged: boolean;
operation: string;
sqlQuery: string;
reasonForChange: string;
changeCreatedAt: Date;
id: number;
createdAt: Date;
updatedAt: Date;
deletedAt: Date;
slicedToRepoId: number;
slicedFolders: string;
ignoredPaths: string;
handledByAction: boolean;
pullIntervalInHr: number;
changedByUserId: number;
slicedFromRepoId: number;
slicedFromBranchName: string;
slicedToBranchName: string;
latestCommitSliceId: number;
clientProjectId: number;
        },"git_repo_slices": {
            createdAt: Date;
updatedAt: Date;
id: number;
slicedFolders: string;
ignoredPaths: string;
slicedFromRepoId: number;
slicedToRepoId: number;
latestCommitSliceId: number;
deletedAt: Date;
slicedFromBranchName: string;
slicedToBranchName: string;
handledByAction: boolean;
pullIntervalInHr: number;
clientProjectId: number;
        },"git_repos": {
            createdAt: Date;
updatedAt: Date;
id: number;
description: string;
isFork: boolean;
isArchived: boolean;
isTemplate: boolean;
isDisabled: boolean;
isPrivate: boolean;
isLocked: boolean;
name: string;
syncSid: string;
organizationId: number;
clientId: string;
deletedAt: Date;
authUrl: string;
syncTableName: string;
owner: string;
source: string;
accessGitUserIds: { [key: string]: unknown } | object;
        },"git_slice_pulls": {
            createdAt: Date;
updatedAt: Date;
id: number;
finishedAt: Date;
startedAt: Date;
error: { [key: string]: unknown } | object;
repoSliceId: number;
commitSliceId: number;
deletedAt: Date;
logs: string;
        },"git_slice_pushes": {
            createdAt: Date;
updatedAt: Date;
id: number;
finishedAt: Date;
startedAt: Date;
error: { [key: string]: unknown } | object;
pullRequestSliceId: number;
commitSliceId: number;
deletedAt: Date;
logs: string;
        },"git_sources": {
            id: string;
description: string;
        },"git_users": {
            createdAt: Date;
updatedAt: Date;
id: number;
name: string;
password: string;
githubAccountLogin: string;
email: string;
agencyId: string;
userId: number;
avatarUrl: string;
deletedAt: Date;
syncTableName: string;
syncSid: string;
gitlabUserLogin: string;
        },"github_accounts": {
            login: string;
avatarUrl: string;
email: string;
name: string;
createdAt: Date;
updatedAt: Date;
sid: string;
password: string;
personalAccessToken: string;
agencyId: string;
id: number;
syncEntityId: number;
deletedAt: Date;
gitUserId: number;
        },"github_app_installations": {
            id: number;
createdAt: Date;
updatedAt: Date;
sid: string;
accountSid: string;
organizationSid: string;
githubAppSid: string;
syncEntityId: number;
deletedAt: Date;
        },"github_apps": {
            id: number;
createdAt: Date;
updatedAt: Date;
sid: string;
name: string;
clientId: string;
clientSecret: string;
privateKey: string;
adminAccountSid: string;
admingOrganizationSid: string;
syncEntityId: number;
deletedAt: Date;
oAuthKey: string;
oAuthSecret: string;
        },"github_branch_commits": {
            commitSid: string;
branchSid: string;
        },"github_branches": {
            name: string;
createdAt: Date;
updatedAt: Date;
sid: string;
id: number;
repoSid: string;
headCommitSid: string;
oid: string;
syncEntityId: number;
deletedAt: Date;
gitBranchId: number;
        },"github_code_comments": {
            id: number;
createdAt: Date;
updatedAt: Date;
sid: string;
syncedAt: Date;
syncError: { [key: string]: unknown } | object;
syncStartedAt: Date;
isOutdated: boolean;
isForked: boolean;
redundantFields: { [key: string]: unknown } | object;
body: string;
path: string;
diffHunk: string;
expiresInType: string;
authorLogin: string;
pullRequestSid: string;
commitSid: string;
        },"github_comment_reactions": {
            id: number;
createdAt: Date;
updatedAt: Date;
sid: string;
content: string;
authorLogin: string;
issueCommentSid: string;
issueSid: string;
pullRequestSid: string;
pullRequestReviewSid: string;
pullRequestCommentSid: string;
pullRequestReviewCommentSid: string;
syncEntityId: number;
deletedAt: Date;
gitCommentReactionId: number;
syncTableName: string;
        },"github_comments": {
            body: string;
createdAt: Date;
updatedAt: Date;
sid: string;
isOutdated: boolean;
isForked: boolean;
id: number;
authorLogin: string;
pullRequestSid: string;
issueSid: string;
redundantFields: { [key: string]: unknown } | object;
syncedAt: Date;
expiresInType: string;
syncError: { [key: string]: unknown } | object;
syncStartedAt: Date;
        },"github_commit_comments": {
            createdAt: Date;
updatedAt: Date;
id: number;
sid: string;
body: string;
position: number;
syncEntityId: number;
authorLogin: string;
commitSid: string;
deletedAt: Date;
gitCommitCommentId: number;
discussionCommentId: number;
        },"github_commit_contexts": {
            id: number;
createdAt: Date;
updatedAt: Date;
sid: string;
avatarUrl: string;
context: string;
targetUrl: string;
description: string;
status: string;
commitSid: string;
syncEntityId: number;
deletedAt: Date;
gitCommitContextId: number;
        },"github_commit_status": {
            id: string;
description: string;
        },"github_commits": {
            oid: string;
createdAt: Date;
updatedAt: Date;
sid: string;
id: number;
authorLogin: string;
status: string;
syncEntityId: number;
deletedAt: Date;
gitCommitId: number;
        },"github_issue_changes": {
            changeId: string;
previousChangeId: string;
automaticallyChanged: boolean;
operation: string;
sqlQuery: string;
reasonForChange: string;
changeCreatedAt: Date;
id: number;
createdAt: Date;
updatedAt: Date;
deletedAt: Date;
sid: string;
title: string;
body: string;
number: number;
changedByUserId: number;
syncEntityId: number;
state: string;
repoSid: string;
authorLogin: string;
associatedTicketId: number;
discussionSourceId: number;
githubAccountAssignedSids: { [key: string]: unknown } | object;
associatedRepoLabels: { [key: string]: unknown } | object;
        },"github_issue_comments": {
            id: number;
createdAt: Date;
updatedAt: Date;
sid: string;
body: string;
authorLogin: string;
issueSid: string;
syncEntityId: number;
deletedAt: Date;
discussionCommentId: number;
        },"github_issue_state": {
            id: string;
description: string;
        },"github_issue_ticket_status_mapping": {
            createdAt: Date;
updatedAt: Date;
id: number;
githubRepoSid: string;
ticketStatus: string;
issueState: string;
labelId: number;
deletedAt: Date;
githubAccountSid: string;
prioritizeUpstream: boolean;
        },"github_issues": {
            createdAt: Date;
updatedAt: Date;
sid: string;
id: number;
authorLogin: string;
repoSid: string;
title: string;
body: string;
state: string;
syncEntityId: number;
number: number;
deletedAt: Date;
discussionSourceId: number;
githubAccountAssignedSids: { [key: string]: unknown } | object;
associatedRepoLabels: { [key: string]: unknown } | object;
        },"github_organization_members": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
sid: string;
syncEntityId: number;
accountLogin: string;
organizationSid: string;
        },"github_organizations": {
            id: number;
createdAt: Date;
updatedAt: Date;
sid: string;
avatarUrl: string;
login: string;
syncEntityId: number;
deletedAt: Date;
gitOrganizationId: number;
        },"github_owners": {
            login: string;
avatarUrl: string;
createdAt: Date;
updatedAt: Date;
sid: string;
clientId: string;
agencyId: string;
id: number;
syncEntityId: number;
deletedAt: Date;
        },"github_pull_request_comments": {
            id: number;
createdAt: Date;
updatedAt: Date;
sid: string;
body: string;
authorLogin: string;
syncEntityId: number;
deletedAt: Date;
gitPullRequestCommentId: number;
discussionCommentId: number;
        },"github_pull_request_review_comment_state": {
            id: string;
description: string;
        },"github_pull_request_review_comments": {
            id: number;
createdAt: Date;
updatedAt: Date;
sid: string;
body: string;
diffHunk: string;
position: number;
outdated: boolean;
path: string;
authorLogin: string;
commitSid: string;
syncEntityId: number;
deletedAt: Date;
gitPullRequestReviewCommentId: number;
discussionCommentId: number;
        },"github_pull_request_review_state": {
            id: string;
description: string;
        },"github_pull_request_review_threads": {
            id: number;
createdAt: Date;
updatedAt: Date;
sid: string;
syncEntityId: number;
deletedAt: Date;
gitPullRequestReviewThreadsId: number;
        },"github_pull_request_reviews": {
            id: number;
createdAt: Date;
updatedAt: Date;
sid: string;
syncEntityId: number;
deletedAt: Date;
gitPullRequestReviewsId: number;
        },"github_pull_request_state": {
            id: string;
description: string;
        },"github_repo_labels": {
            createdAt: Date;
updatedAt: Date;
id: number;
sid: string;
url: string;
name: string;
description: string;
color: string;
default: boolean;
syncEntityId: number;
githubRepoSid: string;
deletedAt: Date;
        },"github_repo_teams": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
sid: string;
name: string;
syncEntityId: number;
teamSid: string;
permission: string;
        },"github_repos": {
            name: string;
createdAt: Date;
updatedAt: Date;
sid: string;
id: number;
ownerLogin: string;
description: string;
isFork: boolean;
isArchived: boolean;
isTemplate: boolean;
isDisabled: boolean;
isPrivate: boolean;
isLocked: boolean;
syncEntityId: number;
issuesEtag: string;
issuesLastUpdatedAt: Date;
pullRequestsEtag: string;
pullRequestsLastUpdatedAt: Date;
deletedAt: Date;
accessGithubAccountSids: { [key: string]: unknown } | object;
        },"github_team_members": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
sid: string;
syncEntityId: number;
accountLogin: string;
teamSid: string;
        },"github_teams": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
sid: string;
name: string;
syncEntityId: number;
organizationSid: string;
        },"github_tokens": {
            id: number;
createdAt: Date;
updatedAt: Date;
token: string;
limit: number;
remaining: number;
resetAt: Date;
deletedAt: Date;
        },"gitlab_applications": {
            createdAt: Date;
updatedAt: Date;
id: number;
sid: string;
name: string;
clientId: string;
clientSecret: string;
redirectURIs: string;
syncEntityId: number;
deletedAt: Date;
        },"gitlab_groups": {
            createdAt: Date;
updatedAt: Date;
id: number;
sid: string;
login: string;
syncEntityId: number;
namespaceSid: string;
deletedAt: Date;
        },"gitlab_issue_comments": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
sid: string;
body: string;
syncEntityId: number;
authorLogin: string;
discussionCommentId: number;
issueSid: string;
        },"gitlab_issue_state": {
            id: string;
description: string;
        },"gitlab_issues": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
sid: string;
title: string;
body: string;
number: number;
dueDate: Date;
gitlabAccountAssignedSids: { [key: string]: unknown } | object;
syncEntityId: number;
state: string;
projectSid: string;
authorLogin: string;
discussionSourceId: number;
        },"gitlab_namespaces": {
            createdAt: Date;
updatedAt: Date;
id: number;
sid: string;
login: string;
syncEntityId: number;
clientId: string;
agencyId: string;
parentNamespaceSid: string;
deletedAt: Date;
        },"gitlab_projects": {
            createdAt: Date;
updatedAt: Date;
id: number;
sid: string;
login: string;
syncEntityId: number;
namespaceSid: string;
deletedAt: Date;
accessGitlabUserSids: { [key: string]: unknown } | object;
        },"gitlab_pull_request_comments": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
sid: string;
body: string;
syncEntityId: number;
authorLogin: string;
discussionCommentId: number;
gitPullRequestCommentId: number;
        },"gitlab_pull_requests": {
            createdAt: Date;
updatedAt: Date;
id: number;
gitPullRequestId: number;
deletedAt: Date;
sid: string;
syncEntityId: number;
authorLogin: string;
        },"gitlab_tokens": {
            createdAt: Date;
updatedAt: Date;
id: number;
token: string;
limit: number;
remaining: number;
resetAt: Date;
deletedAt: Date;
        },"gitlab_users": {
            createdAt: Date;
updatedAt: Date;
id: number;
sid: string;
login: string;
syncEntityId: number;
personalAccessToken: string;
gitUserId: number;
botId: number;
deletedAt: Date;
        },"interviewer_status": {
            type: string;
        },"interviewers": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
appliedAt: Date;
completedAt: Date;
reasonsForApplying: string;
userId: number;
status: string;
        },"jira_accounts": {
            createdAt: Date;
updatedAt: Date;
id: number;
sid: string;
name: string;
token: string;
syncEntityId: number;
email: string;
jiraOrgEndpoint: string;
deletedAt: Date;
        },"jira_app_installations": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
sid: string;
accessToken: string;
accessTokenType: string;
accessTokenExpiresAt: Date;
refreshToken: string;
scopes: { [key: string]: unknown } | object;
syncEntityId: number;
clientId: string;
jiraAppId: number;
userId: number;
        },"jira_apps": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
sid: string;
name: string;
clientId: string;
clientSecret: string;
scopes: { [key: string]: unknown } | object;
isPublic: boolean;
syncEntityId: number;
        },"jira_issue_attachments": {
            createdAt: Date;
updatedAt: Date;
id: number;
sid: string;
properties: { [key: string]: unknown } | object;
syncEntityId: number;
gcpObjectId: string;
issueSid: string;
deletedAt: Date;
        },"jira_issue_changes": {
            changeId: string;
previousChangeId: string;
automaticallyChanged: boolean;
operation: string;
sqlQuery: string;
reasonForChange: string;
changeCreatedAt: Date;
id: number;
createdAt: Date;
updatedAt: Date;
deletedAt: Date;
key: string;
self: string;
properties: { [key: string]: unknown } | object;
transitions: { [key: string]: unknown } | object;
sid: string;
changedByUserId: number;
projectSid: string;
issueTypeSid: string;
status: string;
authorSid: string;
assigneeSid: string;
discussionSourceId: number;
syncEntityId: number;
accessFieldValues: { [key: string]: unknown } | object;
        },"jira_issue_comment": {
            createdAt: Date;
updatedAt: Date;
id: number;
sid: string;
referenceBody: string;
visibility: boolean;
properties: { [key: string]: unknown } | object;
syncEntityId: number;
issueSid: string;
authorSid: string;
body: { [key: string]: unknown } | object;
deletedAt: Date;
bodyHTML: string;
discussionCommentId: number;
        },"jira_issue_fields": {
            createdAt: Date;
updatedAt: Date;
key: string;
name: string;
custom: boolean;
projectSid: string;
deletedAt: Date;
id: string;
        },"jira_issue_ticket_status_mapping": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
ticketStatus: string;
issueState: string;
jiraAccountSid: string;
jiraProjectSid: string;
prioritizeUpstream: boolean;
        },"jira_issue_transitions": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
sid: string;
transitionId: string;
name: string;
syncEntityId: number;
issueSid: string;
status: string;
        },"jira_issue_type_statuses": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
sid: string;
self: string;
description: string;
name: string;
syncEntityId: number;
jiraIssueTypeSid: string;
        },"jira_issue_types": {
            createdAt: Date;
updatedAt: Date;
id: number;
sid: string;
self: string;
description: string;
name: string;
subtask: boolean;
syncEntityId: number;
deletedAt: Date;
        },"jira_issues": {
            createdAt: Date;
updatedAt: Date;
id: number;
sid: string;
key: string;
self: string;
properties: { [key: string]: unknown } | object;
transitions: { [key: string]: unknown } | object;
syncEntityId: number;
projectSid: string;
issueTypeSid: string;
deletedAt: Date;
discussionSourceId: number;
status: string;
assigneeSid: string;
authorSid: string;
accessFieldValues: { [key: string]: unknown } | object;
        },"jira_organizations": {
            createdAt: Date;
updatedAt: Date;
id: number;
endpoint: string;
clientId: string;
deletedAt: Date;
sid: string;
syncEntityId: number;
        },"jira_projects": {
            createdAt: Date;
updatedAt: Date;
id: number;
sid: string;
key: string;
description: string;
name: string;
syncEntityId: number;
deletedAt: Date;
clientProjectId: number;
endpoint: string;
accessJiraAccounts: { [key: string]: unknown } | object;
        },"job_intervals": {
            type: string;
description: string;
        },"legal_entities": {
            type: string;
description: string;
        },"linear_accounts": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
sid: string;
name: string;
syncEntityId: number;
email: string;
token: string;
        },"linear_app_installations": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
sid: string;
accessToken: string;
accessTokenType: string;
expiresAt: Date;
scopes: { [key: string]: unknown } | object;
syncEntityId: number;
linearAppId: number;
teamSid: string;
accountSid: string;
        },"linear_apps": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
sid: string;
name: string;
clientId: string;
clientSecret: string;
syncEntityId: number;
        },"linear_comments": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
sid: string;
body: string;
syncEntityId: number;
authorSid: string;
issueSid: string;
discussionCommentId: number;
        },"linear_integrations": {
            teamId: string;
managerId: string;
id: string;
clientId: string;
created_at: Date;
updated_at: Date;
        },"linear_issue_changes": {
            changeId: string;
previousChangeId: string;
automaticallyChanged: boolean;
operation: string;
sqlQuery: string;
reasonForChange: string;
changeCreatedAt: Date;
id: number;
createdAt: Date;
updatedAt: Date;
deletedAt: Date;
sid: string;
url: string;
title: string;
number: number;
description: string;
labels: string;
changedByUserId: number;
syncEntityId: number;
teamSid: string;
discussionSourceId: number;
assignedLinearAccounts: { [key: string]: unknown } | object;
        },"linear_issues": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
sid: string;
url: string;
title: string;
number: number;
description: string;
syncEntityId: number;
teamSid: string;
labels: string;
discussionSourceId: number;
assignedLinearAccounts: { [key: string]: unknown } | object;
        },"linear_teams": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
sid: string;
key: string;
name: string;
syncEntityId: number;
clientId: string;
        },"meeting_user_emails": {
            meetingId: number;
email: string;
        },"meetings": {
            id: number;
createdAt: Date;
updatedAt: Date;
calendlyMeetingId: string;
scheduledAt: Date;
zoomMeetingSid: string;
associatedClientId: string;
deletedAt: Date;
        },"mentor_status": {
            type: string;
        },"mentors": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
appliedAt: Date;
completedAt: Date;
reasonsForApplying: string;
userId: number;
status: string;
        },"mentorships": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
startDate: Date;
endDate: Date;
mentorUserId: number;
menteeUserId: number;
        },"metric_events": {
            id: number;
createdAt: Date;
value: number;
tableName: string;
entityId: number;
labels: { [key: string]: unknown } | object;
metricName: string;
        },"metrics": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
name: string;
        },"migrations": {
            id: number;
timestamp: string;
name: string;
        },"notification_sources": {
            id: string;
description: string;
        },"notifications": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
body: string;
appLink: string;
discussionCommentId: number;
ticketId: number;
taskId: number;
projectId: number;
userId: number;
isSeen: boolean;
isArchived: boolean;
errorId: number;
sourceId: string;
sentAt: Date;
teamId: number;
        },"opportunities": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
name: string;
availableUntil: Date;
        },"opportunity_skill_requirements": {
            opportunitiesId: number;
skillsId: number;
        },"optional_technologies": {
            clientJobsId: string;
technologiesId: number;
        },"payment_types": {
            id: string;
description: string;
        },"payments_status": {
            id: string;
description: string;
        },"project_daily_standup": {
            createdAt: Date;
updatedAt: Date;
id: number;
summary: string;
messageForClient: string;
postedToClient: boolean;
submittedAt: Date;
userId: number;
clientProjectId: number;
summarizedInUserDailyStandupId: number;
summarizedInClientDailyStandupId: number;
deletedAt: Date;
errorId: number;
        },"pull_request_changes": {
            changeId: string;
previousChangeId: string;
operation: string;
sqlQuery: string;
changedByUserId: string;
reasonForChange: string;
automaticallyChanged: boolean;
changeCreatedAt: Date;
id: string;
title: string;
sliced_pull_request_id: string;
upstream_pull_request_id: string;
cost_in_credits: number;
status: string;
deleted_at: Date;
completed_at: Date;
ticket_id: string;
cost_finalized_at: Date;
inserted_at: Date;
updated_at: Date;
        },"pull_request_estimates": {
            id: string;
lower_estimate_in_credits: number;
upper_estimate_in_credits: number;
status: string;
pull_request_id: string;
inserted_at: Date;
updated_at: Date;
estimated_by_id: string;
reviewed_by_id: string;
        },"pull_requests": {
            id: string;
title: string;
sliced_pull_request_id: number;
upstream_pull_request_id: string;
cost_in_credits: number;
status: string;
deleted_at: Date;
completed_at: Date;
ticket_id: number;
inserted_at: Date;
updated_at: Date;
cost_finalized_at: Date;
        },"qualified_agencies": {
            clientsId: string;
agenciesId: string;
        },"qualified_technologies": {
            clientJobsId: string;
technologiesId: number;
        },"recruiter_agencies": {
            agency_id: string;
recruiter_agency_id: string;
        },"release_flags": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
name: string;
description: string;
expectedExpiryDate: Date;
        },"release_flags_entities": {
            id: number;
entityId: string;
entityType: string;
releaseFlagId: number;
        },"repository_owners": {
            id: number;
isShadow: boolean;
startAt: Date;
endAt: Date;
gitSliceRepoId: number;
repoOwnerUserId: number;
        },"review_question_themes": {
            id: string;
description: string;
        },"review_questions": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
question: string;
theme: string;
responseType: string;
isAdhoc: boolean;
parentQuestionId: number;
        },"review_response_types": {
            id: string;
description: string;
        },"review_responses": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
ratingResponse: number;
textResponse: string;
questionId: number;
reviewId: number;
        },"review_type_questions": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
isOptional: boolean;
questionId: number;
reviewType: string;
        },"review_types": {
            id: string;
description: string;
        },"reviews": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
urgency: number;
completedAt: Date;
reviewerLogin: string;
revieweeLogin: string;
reviewTypeId: string;
ticketId: number;
clientProjectId: number;
clientId: string;
        },"rippling_companies": {
            id: number;
createdAt: Date;
updatedAt: Date;
sid: string;
ein: string;
primaryEmail: string;
phone: string;
name: string;
accessToken: string;
address: { [key: string]: unknown } | object;
tax_info: { [key: string]: unknown } | object;
payroll_settings: { [key: string]: unknown } | object;
workLocations: { [key: string]: unknown } | object;
syncEntityId: number;
deletedAt: Date;
        },"rippling_company_tokens": {
            accessToken: string;
companySid: string;
        },"rippling_employees": {
            id: number;
createdAt: Date;
updatedAt: Date;
sid: string;
name: string;
firstName: string;
employmentType: string;
lastName: string;
dob: string;
ssn: string;
phone: string;
personalEmail: string;
filingStatus: string;
title: string;
compensationAnnualSalary: string;
department: string;
flsaStatus: string;
startDate: string;
endDate: string;
roleState: string;
workEmail: string;
companySid: string;
managerSid: string;
workLocation: { [key: string]: unknown } | object;
address: { [key: string]: unknown } | object;
customFields: { [key: string]: unknown } | object;
syncEntityId: number;
deletedAt: Date;
        },"rippling_payroll_earning_types": {
            id: number;
createdAt: Date;
updatedAt: Date;
sid: string;
earningType: string;
name: string;
companySid: string;
syncEntityId: number;
deletedAt: Date;
        },"rippling_payroll_run_details": {
            id: number;
createdAt: Date;
updatedAt: Date;
sid: string;
netPay: string;
grossPay: string;
companySid: string;
runSid: string;
employeeSid: string;
taxes: { [key: string]: unknown } | object;
deductions: { [key: string]: unknown } | object;
garnishments: { [key: string]: unknown } | object;
syncEntityId: number;
deletedAt: Date;
        },"rippling_payroll_run_earnings": {
            id: number;
createdAt: Date;
updatedAt: Date;
amount: string;
hours: string;
name: string;
companySid: string;
payrollRunDetailsSid: string;
employeeSid: string;
sid: string;
syncEntityId: number;
deletedAt: Date;
        },"rippling_payroll_run_states": {
            id: string;
description: string;
        },"rippling_payroll_runs": {
            id: number;
createdAt: Date;
updatedAt: Date;
sid: string;
runType: string;
checkDate: Date;
name: string;
approvalDeadline: Date;
payPeriodStartDate: Date;
payPeriodEndDate: Date;
runStateId: string;
companySid: string;
scheduleSid: string;
syncEntityId: number;
deletedAt: Date;
        },"rippling_payroll_schedules": {
            id: number;
createdAt: Date;
updatedAt: Date;
sid: string;
name: string;
payFrequency: string;
companySid: string;
syncEntityId: number;
deletedAt: Date;
        },"schema_migrations": {
            version: string;
inserted_at: Date;
        },"skill_relationships": {
            childSkill: string;
parentSkill: string;
        },"skills": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
name: string;
type: string;
technologyId: number;
        },"skilltrack_types": {
            type: string;
description: string;
        },"slack_app_channels": {
            createdAt: Date;
updatedAt: Date;
id: number;
sid: string;
syncEntityId: number;
appSid: string;
channelSid: string;
deletedAt: Date;
        },"slack_app_tokens": {
            createdAt: Date;
updatedAt: Date;
id: number;
token: string;
expiresAt: Date;
appSid: string;
teamSid: string;
deletedAt: Date;
        },"slack_apps": {
            createdAt: Date;
updatedAt: Date;
id: number;
sid: string;
name: string;
appId: string;
clientId: string;
clientSecret: string;
signingSecret: string;
verificationToken: string;
syncEntityId: number;
deletedAt: Date;
dateOfCreation: Date;
        },"slack_channels": {
            createdAt: Date;
updatedAt: Date;
id: number;
sid: string;
isChannel: boolean;
isOrgShared: boolean;
isGeneral: boolean;
isPrivate: boolean;
name: string;
nameNormalized: string;
numMembers: number;
syncEntityId: number;
teamSid: string;
deletedAt: Date;
discussionSourceId: number;
        },"slack_standup_channel_mappings": {
            createdAt: Date;
updatedAt: Date;
id: number;
clientId: string;
projectId: number;
channelSid: string;
deletedAt: Date;
        },"slack_teams": {
            createdAt: Date;
updatedAt: Date;
id: number;
sid: string;
domain: string;
emailDomain: string;
name: string;
syncEntityId: number;
clientId: string;
deletedAt: Date;
        },"slack_user_team_channel_mappings": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
teamId: number;
channelSid: string;
        },"slack_users": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
sid: string;
name: string;
timezone: string;
timezoneNormalized: string;
timezoneOffset: number;
realName: string;
nameNormalized: string;
firstName: string;
lastName: string;
title: string;
phone: string;
displayName: string;
displayNameNormalized: string;
isAdmin: boolean;
isOwner: boolean;
isDeleted: boolean;
syncEntityId: number;
teamSid: string;
email: string;
        },"stripe_invoices": {
            id: string;
currency: string;
description: string;
hosted_invoice_url: string;
status: string;
total: number;
client_monthly_invoice_id: string;
inserted_at: Date;
updated_at: Date;
        },"subscription_job_errors": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
erroredAt: Date;
errorMessage: string;
subscriptionJobId: number;
        },"subscription_jobs": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
startedAt: Date;
processedAt: Date;
ignoredAt: Date;
subscriptionId: number;
        },"subscription_processors": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
startedAt: Date;
lastRanAt: Date;
erroredAt: Date;
errorMessage: string;
subscriptionId: number;
        },"subscriptions": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
name: string;
lastSyncedAt: Date;
        },"syncable_entities": {
            createdAt: Date;
updatedAt: Date;
id: number;
syncedAt: Date;
createdAtSource: Date;
updatedAtSource: Date;
sourceUrl: string;
weight: number;
syncStartedAt: Date;
syncTriggeredAt: Date;
shouldStartSyncAt: Date;
shallow: boolean;
isOutdated: boolean;
isForked: boolean;
redundantFields: { [key: string]: unknown } | object;
expiresInType: string;
tableName: string;
sid: string;
etag: string;
deletedAt: Date;
        },"syncable_entity_job_types": {
            id: string;
description: string;
        },"syncable_entity_syncs": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
startedAt: Date;
finishedAt: Date;
expiresAt: Date;
source: string;
errorMessage: { [key: string]: unknown } | object;
status: string;
syncEntityId: number;
syncEntityJobType: string;
        },"syncable_entity_types": {
            id: string;
description: string;
        },"task_changes": {
            taskCode: string;
title: string;
prLink: string;
branchName: string;
specLink: string;
clientCommitMessage: string;
clientCommitDate: Date;
costInUSD: number;
startedAt: Date;
isBillable: boolean;
completedAt: Date;
maxDuplicateLimit: number;
timebased: boolean;
budget: number;
createdAt: Date;
type: string;
clientBlockersId: number;
ticketCode: string;
pullRequestsId: number;
gitRepoId: number;
status: string;
clientId: string;
dependsOnTasksId: number;
followedByTasksId: number;
managerId: string;
reviewerId: string;
reviewersId: string;
developerId: string;
technologiesId: number;
developerInvoiceId: number;
managerInvoiceId: number;
duplicateOfTaskId: number;
changeId: string;
automaticallyChanged: boolean;
reasonForChange: string;
changeCreatedAt: Date;
description: string;
updatedAt: Date;
changedByUserId: number;
id: number;
operation: string;
sqlQuery: string;
previousChangeId: string;
discussionSourceId: number;
lowerBudget: number;
upperBudget: number;
statusUpdateReason: string;
descriptionType: string;
costInCredits: number;
slicedPullRequestId: number;
pull_request_id: string;
        },"task_client_blockers": {
            tasksId: number;
clientBlockersId: number;
        },"task_code_comments": {
            id: string;
internalCommentUrl: string;
externalCommentUrl: string;
createdAt: Date;
updatedAt: Date;
path: string;
diffHunk: string;
body: string;
authorId: number;
shouldPublish: boolean;
shouldSync: boolean;
lastSync: Date;
commitId: number;
        },"task_credit_approval": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
lowerBudget: number;
upperBudget: number;
reason: string;
taskId: number;
requestedByUserId: number;
reviewedByUserId: number;
status: string;
ticketCreditApprovalId: number;
        },"task_credit_approval_changes": {
            changeId: string;
previousChangeId: string;
automaticallyChanged: boolean;
operation: string;
sqlQuery: string;
reasonForChange: string;
changeCreatedAt: Date;
id: number;
createdAt: Date;
updatedAt: Date;
deletedAt: Date;
lowerBudget: number;
upperBudget: number;
reason: string;
changedByUserId: number;
taskId: number;
requestedByUserId: number;
reviewedByUserId: number;
status: string;
ticketCreditApprovalId: number;
        },"task_credit_overrides": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
description: string;
costInCredits: number;
appliedByUserId: number;
taskId: number;
        },"task_credit_status": {
            id: string;
description: string;
        },"task_daily_standups": {
            id: number;
createdAt: Date;
updatedAt: Date;
summary: string;
submittedAt: string;
updatedETA: Date;
userId: number;
taskId: number;
summarizedInTicketDailyStandupId: number;
summarizedInUserDailyStandupId: number;
deletedAt: Date;
postedToWorkplace: boolean;
errorMessage: string;
erroredAt: Date;
postedToSlack: boolean;
        },"task_dependencies": {
            parentTaskId: number;
childTaskId: number;
id: number;
deletedAt: Date;
        },"task_followers": {
            tasksId_1: number;
tasksId_2: number;
        },"task_reviewers": {
            tasksId: number;
developersId: string;
        },"task_reviews": {
            id: number;
costInUSD: number;
createdAt: Date;
startedAt: Date;
updatedAt: Date;
completedAt: Date;
approvesTaskId: number;
managerId: string;
developerId: string;
status: string;
reviewerInvoiceId: number;
managerInvoiceId: number;
pullRequestReviewId: number;
        },"task_reviews_status": {
            type: string;
description: string;
        },"task_status_changes": {
            id: string;
automaticallyTransioned: boolean;
reasonForTransition: string;
createdAt: Date;
transitionedAt: Date;
taskId: number;
status: string;
transitionedByUserId: number;
        },"task_submissions": {
            createdAt: Date;
updatedAt: Date;
id: number;
taskId: number;
gcpObjectId: string;
userId: number;
processed: boolean;
syncError: { [key: string]: unknown } | object;
deletedAt: Date;
        },"task_technologies": {
            tasksId: number;
technologiesId: number;
        },"task_time_logs": {
            id: number;
timedoctorTaskId: string;
timeSpent: number;
startedAt: Date;
finishedAt: Date;
CreatedDateColumn: Date;
UpdateDateColumn: Date;
taskId: number;
developerId: string;
        },"task_work": {
            id: number;
costInUSD: number;
createdAt: Date;
resourceURL: string;
startedAt: Date;
updatedAt: Date;
completedAt: Date;
status: string;
managerId: string;
developerId: string;
workerInvoiceId: number;
managerInvoiceId: number;
        },"task_work_status": {
            type: string;
description: string;
        },"tasks": {
            id: number;
type: string;
description: string;
title: string;
ticketCode: string;
prLink: string;
specLink: string;
costInUSD: number;
completedAt: Date;
clientId: string;
managerId: string;
reviewerId: string;
developerId: string;
status: string;
createdAt: Date;
startedAt: Date;
updatedAt: Date;
branchName: string;
clientCommitMessage: string;
clientCommitDate: Date;
isBillable: boolean;
developerInvoiceId: number;
managerInvoiceId: number;
maxDuplicateLimit: number;
duplicateOfTaskId: number;
timebased: boolean;
taskCode: string;
gitRepoId: number;
descriptionType: string;
budget: number;
statusUpdateReason: string;
lowerBudget: number;
upperBudget: number;
discussionSourceId: number;
costInCredits: number;
slicedPullRequestId: number;
pull_request_id: string;
status_updated_at: Date;
        },"tasks_status": {
            type: string;
description: string;
        },"tasks_type": {
            type: string;
description: string;
        },"technologies": {
            id: number;
name: string;
        },"ticket_attachments": {
            createdAt: Date;
updatedAt: Date;
gcpObjectId: string;
ticketId: number;
deletedAt: Date;
        },"ticket_billable_overrides": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
billableAt: Date;
reason: string;
ticketId: number;
changedByUserId: number;
        },"ticket_changes": {
            code: string;
title: string;
costInCredits: number;
discount: number;
ticketLink: string;
isInternal: boolean;
startedAt: Date;
completedAt: Date;
cancelledAt: Date;
syncedAt: Date;
isSynced: boolean;
lowerBudget: number;
upperBudget: number;
createdAt: Date;
invoiceId: number;
type: string;
clientId: string;
clientProjectId: number;
managerId: string;
clientBlockersId: number;
jiraIssueSid: string;
githubIssueSid: string;
reposId: number;
status: string;
changeId: string;
automaticallyChanged: boolean;
reasonForChange: string;
changeCreatedAt: Date;
updatedAt: Date;
changedByUserId: number;
id: number;
operation: string;
sqlQuery: string;
previousChangeId: string;
priority: number;
discussionSourceId: number;
statusUpdatedAt: Date;
statusUpdateReason: string;
description: string;
userTeamId: number;
linearIssueSid: string;
descriptionType: string;
ticketSourceId: number;
gitlabIssueSid: string;
gitRepoId: number;
status_v2: string;
        },"ticket_client_blockers": {
            ticketsId: number;
clientBlockersId: number;
        },"ticket_credit_approval_changes": {
            changeId: string;
previousChangeId: string;
automaticallyChanged: boolean;
operation: string;
sqlQuery: string;
reasonForChange: string;
changeCreatedAt: Date;
id: number;
createdAt: Date;
updatedAt: Date;
deletedAt: Date;
lowerBudget: number;
upperBudget: number;
reason: string;
changedByUserId: number;
ticketId: number;
requestedByUserId: number;
reviewedByUserId: number;
status: string;
        },"ticket_credit_approval_details": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
ticketCreditApprovalId: number;
taskCreditApprovalId: number;
        },"ticket_credit_approvals": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
lowerBudget: number;
upperBudget: number;
ticketId: number;
requestedByUserId: number;
reviewedByUserId: number;
status: string;
reason: string;
        },"ticket_credit_status": {
            id: string;
description: string;
        },"ticket_daily_standups": {
            id: number;
createdAt: Date;
updatedAt: Date;
message: string;
submittedAt: string;
updatedETA: Date;
userId: number;
ticketId: number;
summarizedInClientDailyStandupId: number;
summarizedInUserDailyStandupId: number;
summarizedInProjectDailyStandupId: number;
deletedAt: Date;
        },"ticket_intentions": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
ticketIntentionType: string;
ticketId: number;
        },"ticket_intentions_type": {
            type: string;
description: string;
        },"ticket_means": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
ticketMeansType: string;
ticketId: number;
        },"ticket_means_type": {
            type: string;
description: string;
        },"ticket_refund": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
costInCredits: number;
reason: string;
ticketId: number;
issuedByUserId: number;
        },"ticket_repos": {
            ticketId: number;
repoId: number;
        },"ticket_scope_change_request_states": {
            id: string;
description: string;
        },"ticket_scope_change_requests": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
title: string;
description: string;
appliedAt: Date;
ticketId: number;
state: string;
createdByUserId: number;
        },"ticket_source_changes": {
            changeId: string;
previousChangeId: string;
automaticallyChanged: boolean;
operation: string;
sqlQuery: string;
reasonForChange: string;
changeCreatedAt: Date;
id: number;
createdAt: Date;
updatedAt: Date;
deletedAt: Date;
prefix: string;
creditsToStoryPoints: number;
jiraStoryPointKey: string;
changedByUserId: number;
repoId: number;
clientId: string;
projectName: string;
jiraProjectSid: string;
linearTeamSid: string;
jiraAssigneeSid: string;
gitlabProjectSid: string;
gitlabAssigneeSid: string;
jiraDescriptionFieldId: string;
gitRepoId: number;
githubRepoLabelSid: string;
        },"ticket_source_pull_strategies": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
labels: string;
assignee: string;
priority: { [key: string]: unknown } | object;
assignedById: string;
commentById: string;
ticketSourceId: number;
        },"ticket_source_pull_strategy_types": {
            id: string;
description: string;
        },"ticket_source_push_strategies": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
labels: string;
ticketStatusMap: { [key: string]: unknown } | object;
commentById: string;
ticketSourceId: number;
        },"ticket_source_push_strategy_types": {
            id: string;
description: string;
        },"ticket_sources": {
            createdAt: Date;
updatedAt: Date;
id: number;
prefix: string;
repoId: number;
jiraProjectSid: string;
deletedAt: Date;
clientId: string;
projectName: string;
linearTeamSid: string;
creditsToStoryPoints: number;
jiraStoryPointKey: string;
jiraAssigneeSid: string;
gitlabProjectSid: string;
gitlabAssigneeSid: string;
jiraDescriptionFieldId: string;
gitRepoId: number;
githubRepoLabelSid: string;
type: "This type is missing in the generator mapping, plz fix.";
internal_sources_counter: number;
        },"ticket_status": {
            type: string;
description: string;
        },"ticket_status_changes": {
            id: string;
automaticallyTransioned: boolean;
reasonForTransition: string;
createdAt: Date;
transitionedAt: Date;
ticketId: number;
status: string;
transitionedByUserId: number;
        },"tickets": {
            id: number;
code: string;
title: string;
description: string;
costInCredits: number;
completedAt: Date;
clientId: string;
managerId: string;
createdAt: Date;
startedAt: Date;
updatedAt: Date;
ticketLink: string;
isInternal: boolean;
syncedAt: Date;
isSynced: boolean;
clientProjectId: number;
invoiceId: number;
cancelledAt: Date;
status: string;
jiraIssueSid: string;
githubIssueSid: string;
type: string;
descriptionType: string;
lowerBudget: number;
upperBudget: number;
statusUpdatedAt: Date;
statusUpdateReason: string;
ticketSourceId: number;
priority: number;
linearIssueSid: string;
discussionSourceId: number;
userTeamId: number;
gitlabIssueSid: string;
gitRepoId: number;
status_v2: string;
        },"tickets_types": {
            type: string;
description: string;
        },"typeorm_metadata": {
            type: string;
database: string;
schema: string;
table: string;
name: string;
value: string;
        },"user_billable_hours": {
            id: number;
creditsPerHour: number;
startDate: Date;
endDate: Date;
userLogin: string;
        },"user_changes": {
            changeId: string;
previousChangeId: string;
automaticallyChanged: boolean;
operation: string;
sqlQuery: string;
reasonForChange: string;
changeCreatedAt: Date;
id: number;
createdAt: Date;
updatedAt: Date;
deletedAt: Date;
login: string;
name: string;
nickname: string;
firstName: string;
lastName: string;
dateOfBirth: Date;
timezone: string;
auth0Sid: string;
avatarUrl: string;
telephone: string;
passwordHash: string;
intercomUserId: string;
changedByUserId: number;
unverifiedEmail: string;
defaultEmail: string;
developerId: string;
clientUserId: string;
adminUserId: string;
agencyUserId: string;
ripplingEmployeeId: number;
        },"user_coefficients": {
            userId: number;
startDate: Date;
endDate: Date;
coefficient: string;
createdAt: Date;
updatedAt: Date;
id: number;
        },"user_contract_types": {
            id: string;
description: string;
        },"user_contracts": {
            id: number;
amountPerWeek: number;
title: string;
hoursPerWeek: number;
startDate: Date;
endDate: Date;
url: string;
userLogin: string;
contractSentAt: Date;
contractSendError: string;
defaultCoefficient: string;
gracePeriodEndDate: Date;
contractType: string;
        },"user_culture_screens": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
scheduledAt: Date;
attendedAt: Date;
communicationScore: number;
workAttitudeScore: number;
remoteWorkScore: number;
careerGoalsScore: number;
expectedMonthlySalary: number;
expectedHourlySalary: number;
availableFrom: Date;
availableWeeklyCapacity: number;
userId: number;
notes: string;
recordingLink: string;
determinedByUserId: number;
        },"user_daily_earnings": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
date: Date;
hoursWorkedOnDay: number;
overrideHoursWorkedOnDay: number;
userLogin: string;
        },"user_daily_facts_structure": {
            occurredAt: Date;
leaveIsApproved: boolean;
hoursLogged: number;
hoursRequired: number;
hoursLoggedOnOther: number;
userId: number;
leaveId: number;
        },"user_daily_plan_activities": {
            id: string;
activity_id: string;
user_daily_plan_id: string;
        },"user_daily_plan_tasks": {
            id: string;
task_id: string;
user_daily_plan_id: string;
        },"user_daily_plans": {
            id: string;
submitted_at: Date;
user_id: number;
inserted_at: Date;
updated_at: Date;
        },"user_daily_retrospectives": {
            id: string;
submitted_at: Date;
user_daily_plan_id: string;
user_id: string;
inserted_at: Date;
updated_at: Date;
        },"user_daily_standups": {
            id: number;
createdAt: Date;
updatedAt: Date;
summary: string;
submittedAt: string;
userId: number;
deletedAt: Date;
postedToWorkplace: boolean;
errorMessage: string;
erroredAt: Date;
messageForTeams: string;
errorId: number;
postedToSlack: boolean;
        },"user_emails": {
            email: string;
userId: number;
verified: boolean;
        },"user_event_source_types": {
            id: string;
description: string;
        },"user_event_types": {
            id: string;
description: string;
        },"user_events": {
            id: string;
createdAt: Date;
updatedAt: Date;
deletedAt: Date;
occurredAt: Date;
eventType: string;
userId: number;
taskId: number;
ticketId: number;
clientProjectId: number;
clientId: string;
appName: string;
browserUrl: string;
filePath: string;
gitOwner: string;
gitRepoName: string;
gitBranchRef: string;
gitRelativeFilePath: string;
gitCommitHash: string;
gitSourceId: string;
duration: number;
pollInterval: number;
title: string;
eventSource: string;
isProcessed: boolean;
        },"user_facts_structure": {
            paidLeavesEarned: number;
paidLeavesUtilized: number;
userId: number;
        },"user_hackweek_screens": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
notes: string;
techSkillsScore: number;
workOutputScore: number;
communicationScore: number;
teamWorkScore: number;
startAt: Date;
endAt: Date;
userId: number;
result: string;
mentoredById: number;
        },"user_hackweek_screens_result": {
            type: string;
description: string;
        },"user_invoices": {
            id: number;
createdAt: Date;
updatedAt: Date;
invoiceCode: string;
costInUSD: number;
dueAt: Date;
userId: number;
paidByAgencyInvoiceId: number;
adjustedCostInUSD: number;
startAt: Date;
endAt: Date;
deletedAt: Date;
        },"user_leave_types": {
            id: string;
description: string;
        },"user_leaves": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
startAt: Date;
endAt: Date;
leaveReason: string;
isApproved: boolean;
userId: number;
leaveTypeId: string;
approvedById: number;
        },"user_onboarded_repos": {
            createdAt: Date;
updatedAt: Date;
id: number;
login: string;
repoId: number;
deletedAt: Date;
        },"user_opportunity_interests": {
            opportunitiesId: number;
usersId: number;
        },"user_payment_status": {
            id: string;
description: string;
        },"user_payment_types": {
            id: string;
description: string;
        },"user_payments": {
            id: number;
createdAt: Date;
updatedAt: Date;
finishedAt: Date;
amountInUSD: number;
channelTransactionId: string;
status: string;
paymentType: string;
userLogin: string;
ripplingPayrollRunDetailsSid: string;
deletedAt: Date;
        },"user_profiles": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
syncTableName: string;
syncSid: string;
personalAccessToken: string;
password: string;
refreshToken: string;
accessToken: string;
accessTokenExpiresAt: Date;
rateLimitLeft: string;
rateLimitResetsAt: Date;
defaultEmailVerified: boolean;
avatarUrl: string;
login: string;
name: string;
firstName: string;
lastName: string;
defaultEmail: string;
userId: number;
type: string;
        },"user_sessions": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
accessToken: string;
sessionToken: string;
expiresAt: Date;
userId: number;
        },"user_skills": {
            startDate: Date;
aggregatedMonthsOfExperience: number;
lastUsedDate: Date;
skillId: number;
userId: number;
competencyId: string;
        },"user_team_clients": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
isOwned: boolean;
userTeamId: number;
clientId: string;
projectName: string;
managerId: number;
        },"user_team_leads": {
            id: number;
isShadow: boolean;
startAt: Date;
endAt: Date;
teamLeadUserId: number;
userTeamId: number;
        },"user_team_member_changes": {
            changeId: string;
previousChangeId: string;
automaticallyChanged: boolean;
operation: string;
sqlQuery: string;
reasonForChange: string;
changeCreatedAt: Date;
startAt: Date;
endAt: Date;
role: string;
createdAt: Date;
updatedAt: Date;
deletedAt: Date;
changedByUserId: number;
id: number;
userId: number;
userTeamId: number;
        },"user_team_members": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
startAt: Date;
endAt: Date;
userId: number;
userTeamId: number;
role: string;
        },"user_team_roles": {
            id: string;
description: string;
        },"user_team_standups": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
startAt: Date;
endAt: Date;
userTeamId: number;
standupTime: Date;
        },"user_teams": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
teamName: string;
workspaceGroupSid: string;
teamLeadUserId: number;
isPublic: boolean;
googleGroupEmail: string;
parentTeamId: number;
standupTime: Date;
        },"user_tech_screens": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
scheduledAt: Date;
notes: string;
recordingLink: string;
attendedAt: Date;
communicationScore: number;
techSkillsScore: number;
passedTechScreen: boolean;
userId: number;
interviewedById: number;
        },"user_tokens": {
            id: string;
token: Buffer;
context: string;
sent_to: string;
user_id: string;
inserted_at: Date;
        },"user_transaction_types": {
            id: string;
description: string;
        },"user_transactions": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
amountInUSD: number;
approved: boolean;
userLogin: string;
approvedBy: string;
transactionTypeId: string;
occurredAt: Date;
        },"user_verification_requests": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
token: string;
identifier: string;
expiresAt: Date;
userId: number;
        },"user_work_logs": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
workDescription: string;
startAt: Date;
endAt: Date;
status: string;
approvalStatus: string;
workType: string;
meetingType: string;
userId: number;
approvedBy: number;
technologyId: number;
taskId: number;
ticketId: number;
clientProjectId: number;
source: string;
billableToClient: boolean;
clientId: string;
activity_id: string;
        },"users": {
            id: number;
firstName: string;
lastName: string;
defaultEmail: string;
telephone: string;
passwordHash: string;
login: string;
ripplingEmployeeId: number;
avatarUrl: string;
name: string;
nickname: string;
auth0Sid: string;
unverifiedEmail: string;
intercomUserId: string;
dateOfBirth: Date;
timezone: string;
createdAt: Date;
updatedAt: Date;
deletedAt: Date;
        },"webhook_event_errors": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
mergeError: { [key: string]: unknown } | object;
occurredAt: Date;
expiresAt: Date;
webhook_event_id: number;
        },"webhook_events": {
            createdAt: Date;
updatedAt: Date;
id: number;
eventType: string;
eventSubType: string;
isIgnored: boolean;
mergedAt: Date;
data: { [key: string]: unknown } | object;
syncEntityId: number;
webhookId: number;
deletedAt: Date;
sid: string;
occurredAt: Date;
headers: { [key: string]: unknown } | object;
        },"webhooks": {
            createdAt: Date;
updatedAt: Date;
id: number;
source: string;
isActive: boolean;
syncEntityId: number;
secret: string;
deletedAt: Date;
eventTypeJSONPath: string;
eventSubTypeJSONPath: string;
zoomAppId: number;
        },"work_log_approval_status_types": {
            id: string;
description: string;
        },"work_log_meeting_types": {
            id: string;
description: string;
        },"work_log_status_types": {
            id: string;
description: string;
        },"work_log_types": {
            id: string;
description: string;
        },"work_machine_os": {
            type: string;
description: string;
        },"zoom_app": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
sid: string;
name: string;
authorizationToken: string;
syncEntityId: number;
        },"zoom_meeting_instance_participants": {
            zoomMeetingInstanceSid: string;
zoomUserSid: string;
id: number;
participantId: string;
joinTime: Date;
leaveTime: Date;
        },"zoom_meeting_instances": {
            id: number;
createdAt: Date;
updatedAt: Date;
sid: string;
zoomMeetingSid: string;
syncEntityId: number;
deletedAt: Date;
startTime: Date;
endTime: Date;
        },"zoom_meeting_occurences": {
            occurenceSid: string;
startTime: Date;
zoomMeetingSid: string;
        },"zoom_meeting_recurrences": {
            recurrenceType: number;
recurrenceRepeatInterval: number;
recurrenceMonthlyDay: number;
recurrenceMonthlyWeekDay: number;
recurrenceEndTimes: number;
recurrenceEndDateTime: Date;
recurrenceMonthlyWeek: number;
zoomMeetingSid: string;
recurrenceWeeklyDays: string;
        },"zoom_meetings": {
            id: number;
createdAt: Date;
updatedAt: Date;
sid: string;
type: number;
startTime: Date;
duration: number;
joinUrl: string;
zoomHostSid: string;
syncEntityId: number;
deletedAt: Date;
topic: string;
agenda: string;
registration_url: string;
        },"zoom_recording_files": {
            id: number;
createdAt: Date;
updatedAt: Date;
sid: string;
startTime: Date;
endTime: Date;
playUrl: string;
downloadUrl: string;
recordingType: string;
status: string;
fileType: string;
fileSize: string;
zoomRecordingSid: string;
zoomMeetingSid: string;
syncEntityId: number;
deletedAt: Date;
        },"zoom_recordings": {
            id: number;
createdAt: Date;
updatedAt: Date;
sid: string;
duration: number;
zoomMeetingSid: string;
zoomMeetingInstanceSid: string;
syncEntityId: number;
deletedAt: Date;
shareUrl: string;
totalSize: string;
recordingCount: string;
downloadToken: string;
        },"zoom_users": {
            id: number;
createdAt: Date;
updatedAt: Date;
sid: string;
email: string;
syncEntityId: number;
deletedAt: Date;
firstName: string;
lastName: string;
userType: number;
pmi: string;
use_pmi: boolean;
        }
    },"pull_request_estimate": {
      "clients_pricing_models": {
            id: string;
client_id: string;
pricing_model_version: string;
inserted_at: Date;
updated_at: Date;
        },"pricing_models": {
            version: string;
model: { [key: string]: unknown } | object;
inputs_schema: { [key: string]: unknown } | object;
inserted_at: Date;
updated_at: Date;
        },"pricing_pull_request_estimate_variables": {
            id: string;
pricing_model_version: string;
pull_request_id: string;
values: { [key: string]: unknown } | object;
inserted_at: Date;
updated_at: Date;
        },"pricing_repository_variables": {
            id: string;
git_repo_id: string;
pricing_model_version: string;
values: { [key: string]: unknown } | object;
inserted_at: Date;
updated_at: Date;
        }
    },"recruiter": {
      "calendly_event_memberships": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
user: string;
event: string;
name: string;
        },"calendly_event_types": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
sid: string;
kind: string;
name: string;
syncEntityId: number;
active: boolean;
description: string;
owner: string;
durationInMins: number;
        },"calendly_events": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
sid: string;
startTime: Date;
endTime: Date;
canceled: boolean;
cancelReason: string;
cancelName: string;
syncEntityId: number;
name: string;
rescheduled: boolean;
location: string;
locationType: string;
eventType: string;
invitee: string;
zoomMeeting: string;
        },"calendly_webhook_subcriptions": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
sid: string;
callbackUrl: string;
active: boolean;
syncEntityId: number;
creator: string;
user: string;
        },"opportunities": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
name: string;
availableUntil: Date;
        },"opportunity_skill_requirements": {
            opportunitiesId: number;
skillsId: number;
        },"recruiter_countries": {
            recruitersId: number;
countriesCode: string;
        },"recruiter_opportunities": {
            recruitersId: number;
opportunitiesId: number;
        },"recruiter_skills": {
            recruitersId: number;
skillsId: number;
        },"recruiters": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
userId: number;
        },"skill_relationships": {
            childSkill: string;
parentSkill: string;
        },"skills": {
            createdAt: Date;
updatedAt: Date;
deletedAt: Date;
id: number;
name: string;
type: string;
technologyId: number;
        },"user_opportunity_interests": {
            opportunitiesId: number;
usersId: number;
        },"user_skills": {
            startDate: Date;
aggregatedMonthsOfExperience: number;
lastUsedDate: Date;
skillId: number;
userId: number;
competencyId: string;
        }
    },"stripe": {
      "account": {
            id: string;
business_profile_mcc: string;
business_profile_name: string;
business_profile_product_description: string;
business_profile_support_address_city: string;
business_profile_support_address_country: string;
business_profile_support_address_line_1: string;
business_profile_support_address_line_2: string;
business_profile_support_address_postal_code: string;
business_profile_support_address_state: string;
business_profile_support_email: string;
business_profile_support_phone: string;
business_profile_support_url: string;
business_profile_url: string;
business_type: string;
capabilities_card_issuing: string;
capabilities_card_payments: string;
capabilities_legacy_payments: string;
capabilities_transfers: string;
capabilities_platform_payments: string;
charges_enabled: boolean;
company_address_city: string;
company_address_country: string;
company_address_line_1: string;
company_address_line_2: string;
company_address_postal_code: string;
company_address_state: string;
company_address_kana_city: string;
company_address_kana_country: string;
company_address_kana_line_1: string;
company_address_kana_line_2: string;
company_address_kana_postal_code: string;
company_address_kana_state: string;
company_address_kana_town: string;
company_address_kanji_city: string;
company_address_kanji_country: string;
company_address_kanji_line_1: string;
company_address_kanji_line_2: string;
company_address_kanji_postal_code: string;
company_address_kanji_state: string;
company_address_kanji_town: string;
company_directors_provided: boolean;
company_executives_provided: boolean;
company_name: string;
company_name_kana: string;
company_name_kanji: string;
company_owners_provided: boolean;
company_phone: string;
company_structure: string;
company_tax_id_provided: boolean;
company_tax_id_registrar: string;
company_vat_id_provided: boolean;
company_verification_document_back: string;
company_verification_document_details: string;
company_verification_document_details_code: string;
company_verification_document_front: string;
country: string;
created: Date;
default_currency: string;
details_submitted: boolean;
email: string;
individual_id: string;
payouts_enabled: boolean;
requirements_current_deadline: Date;
requirements_currently_due: { [key: string]: unknown } | object;
requirements_disabled_reason: string;
requirements_errors: { [key: string]: unknown } | object;
requirements_eventually_due: { [key: string]: unknown } | object;
requirements_past_due: { [key: string]: unknown } | object;
requirements_pending_verification: { [key: string]: unknown } | object;
settings_branding_icon: string;
settings_branding_logo: string;
settings_branding_primary_color: string;
settings_card_payments_decline_on_avs_failure: boolean;
settings_card_payments_decline_on_cvc_failure: boolean;
settings_card_payments_statement_descriptor_prefix: string;
settings_dashboard_display_name: string;
settings_dashboard_timezone: string;
settings_payments_statement_descriptor: string;
settings_payments_statement_descriptor_kana: string;
settings_payments_statement_descriptor_kanji: string;
settings_payouts_debit_negative_balances: boolean;
settings_payouts_schedule_delay_days: number;
settings_payouts_schedule_interval: string;
settings_payouts_schedule_monthly_anchor: number;
settings_payouts_schedule_weekly_anchor: string;
settings_payouts_statement_descriptor: string;
tos_acceptance_date: Date;
tos_acceptance_ip: string;
tos_acceptance_user_agent: string;
type: string;
is_deleted: boolean;
_fivetran_synced: Date;
metadata: { [key: string]: unknown } | object;
capabilities_bancontact_payments: string;
capabilities_bacs_debit_payments: string;
capabilities_oxxo_payments: string;
capabilities_cartes_bancaires_payments: string;
capabilities_sepa_debit_payments: string;
capabilities_p_24_payments: string;
capabilities_tax_reporting_us_1099_k: string;
capabilities_grabpay_payments: string;
capabilities_eps_payments: string;
capabilities_afterpay_clearpay_payments: string;
capabilities_jcb_payments: string;
capabilities_ideal_payments: string;
capabilities_tax_reporting_us_1099_misc: string;
capabilities_sofort_payments: string;
capabilities_fpx_payments: string;
capabilities_giropay_payments: string;
capabilities_au_becs_debit_payments: string;
        },"apple_pay_domain": {
            id: string;
connected_account_id: string;
created: Date;
domain_name: string;
livemode: boolean;
_fivetran_synced: Date;
        },"application_fee": {
            id: string;
amount: string;
amount_refunded: string;
application: string;
created: Date;
currency: string;
livemode: boolean;
originating_transaction: string;
refunded: boolean;
account_id: string;
balance_transaction_id: string;
charge_id: string;
_fivetran_synced: Date;
        },"application_fee_refund": {
            id: string;
amount: string;
created: Date;
currency: string;
balance_transaction_id: string;
application_fee_id: string;
_fivetran_synced: Date;
metadata: { [key: string]: unknown } | object;
        },"attribute": {
            id: string;
name: string;
value: string;
_fivetran_synced: Date;
        },"au_becs_debit": {
            payment_method_id: string;
bsb_number: string;
fingerprint: string;
last_4: string;
_fivetran_synced: Date;
        },"authorization": {
            id: string;
approved: boolean;
authorization_method: string;
amount: string;
currency: string;
cardholder: string;
created: Date;
is_held_amount_controllable: boolean;
livemode: boolean;
merchant_data_category: string;
merchant_data_city: string;
merchant_data_country: string;
merchant_data_name: string;
merchant_data_network_id: string;
merchant_data_postal_code: string;
merchant_data_state: string;
pending_authorized_amount: string;
pending_held_amount: string;
status: string;
verification_data_address_line_1_check: string;
verification_data_address_zip_check: string;
verification_data_cvc_check: string;
verification_data_expiry_check: string;
wallet_provider: string;
card_id: string;
held_amount: string;
held_currency: string;
_fivetran_synced: Date;
metadata: { [key: string]: unknown } | object;
amount_details_atm_fee: number;
        },"balance_transaction": {
            id: string;
connected_account_id: string;
amount: string;
available_on: Date;
created: Date;
currency: string;
description: string;
exchange_rate: number;
fee: string;
net: string;
source: string;
status: string;
type: string;
_fivetran_synced: Date;
payout_id: string;
        },"bank_account": {
            id: string;
connected_account_id: string;
account: string;
account_holder_name: string;
account_holder_type: string;
bank_name: string;
country: string;
currency: string;
fingerprint: string;
last_4: string;
routing_number: string;
status: string;
is_deleted: boolean;
customer_id: string;
_fivetran_synced: Date;
metadata: { [key: string]: unknown } | object;
        },"card": {
            id: string;
connected_account_id: string;
address_city: string;
address_country: string;
address_line_1: string;
address_line_1_check: string;
address_line_2: string;
address_state: string;
address_zip: string;
address_zip_check: string;
brand: string;
country: string;
currency: string;
created: Date;
cvc_check: string;
dynamic_last_4: string;
exp_month: number;
exp_year: number;
fingerprint: string;
funding: string;
last_4: string;
name: string;
recipient: string;
tokenization_method: string;
network: string;
is_deleted: boolean;
account_id: string;
customer_id: string;
_fivetran_synced: Date;
metadata: { [key: string]: unknown } | object;
wallet_type: string;
three_d_secure_usage_supported: boolean;
        },"cardholder": {
            id: string;
billing_name: string;
billing_address_city: string;
billing_address_country: string;
billing_address_line_1: string;
billing_address_line_2: string;
billing_address_postal_code: string;
billing_address_state: string;
created: Date;
email: string;
is_default: boolean;
livemode: boolean;
name: string;
phone_number: string;
status: string;
type: string;
_fivetran_synced: Date;
metadata: { [key: string]: unknown } | object;
spending_controls_blocked_categories: { [key: string]: unknown } | object;
spending_controls_spending_limits_currency: string;
spending_controls_allowed_categories: { [key: string]: unknown } | object;
spending_controls_spending_limits: { [key: string]: unknown } | object;
        },"charge": {
            id: string;
connected_account_id: string;
amount: string;
amount_refunded: string;
application: string;
application_fee_amount: string;
captured: boolean;
created: Date;
currency: string;
description: string;
destination: string;
failure_code: string;
failure_message: string;
fraud_details_user_report: string;
fraud_details_stripe_report: string;
livemode: boolean;
on_behalf_of: string;
outcome_network_status: string;
outcome_reason: string;
outcome_risk_level: string;
outcome_risk_score: number;
outcome_seller_message: string;
outcome_type: string;
paid: boolean;
receipt_email: string;
receipt_number: string;
receipt_url: string;
refunded: boolean;
shipping_address_city: string;
shipping_address_country: string;
shipping_address_line_1: string;
shipping_address_line_2: string;
shipping_address_postal_code: string;
shipping_address_state: string;
shipping_carrier: string;
shipping_name: string;
shipping_phone: string;
shipping_tracking_number: string;
card_id: string;
bank_account_id: string;
source_id: string;
source_transfer: string;
statement_descriptor: string;
status: string;
transfer_data_destination: string;
transfer_group: string;
balance_transaction_id: string;
customer_id: string;
invoice_id: string;
payment_intent_id: string;
transfer_id: string;
_fivetran_synced: Date;
rule_rule: string;
metadata: { [key: string]: unknown } | object;
calculated_statement_descriptor: string;
payment_method_id: string;
billing_detail_email: string;
billing_detail_address_country: string;
billing_detail_name: string;
billing_detail_address_line_1: string;
billing_detail_address_postal_code: string;
billing_detail_address_city: string;
billing_detail_phone: string;
billing_detail_address_state: string;
billing_detail_address_line_2: string;
        },"coupon": {
            id: string;
amount_off: string;
created: Date;
currency: string;
duration: string;
duration_in_months: number;
livemode: boolean;
max_redemptions: string;
name: string;
percent_off: number;
redeem_by: Date;
times_redeemed: string;
valid: boolean;
is_deleted: boolean;
_fivetran_synced: Date;
metadata: { [key: string]: unknown } | object;
        },"credit_note": {
            id: string;
amount: string;
created: Date;
currency: string;
discount_amount: string;
subtotal: string;
total: string;
livemode: boolean;
memo: string;
number: string;
pdf: string;
reason: string;
status: string;
type: string;
voided_at: Date;
customer_balance_transaction_id: string;
invoice_id: string;
refund_id: string;
_fivetran_synced: Date;
metadata: { [key: string]: unknown } | object;
        },"credit_note_line_item": {
            id: string;
credit_note_id: string;
amount: string;
discount_amount: string;
description: string;
livemode: boolean;
quantity: string;
type: string;
unit_amount: string;
unit_amount_decimal: string;
_fivetran_synced: Date;
        },"customer": {
            id: string;
account_balance: string;
balance: string;
created: Date;
currency: string;
address_city: string;
address_country: string;
address_line_1: string;
address_line_2: string;
address_postal_code: string;
address_state: string;
name: string;
bank_account_id: string;
source_id: string;
default_card_id: string;
delinquent: boolean;
description: string;
email: string;
phone: string;
invoice_prefix: string;
invoice_settings_default_payment_method: string;
invoice_settings_footer: string;
livemode: boolean;
shipping_address_city: string;
shipping_address_country: string;
shipping_address_line_1: string;
shipping_address_line_2: string;
shipping_address_postal_code: string;
shipping_address_state: string;
shipping_carrier: string;
shipping_name: string;
shipping_phone: string;
shipping_tracking_number: string;
tax_info_tax_id: string;
tax_info_type: string;
tax_exempt: string;
tax_info_verification_status: string;
tax_info_verification_verified_name: string;
is_deleted: boolean;
_fivetran_synced: Date;
metadata: { [key: string]: unknown } | object;
        },"customer_balance_transaction": {
            id: string;
amount: string;
created: Date;
currency: string;
credit_note: string;
description: string;
ending_balance: string;
livemode: boolean;
type: string;
customer_id: string;
invoice_id: string;
_fivetran_synced: Date;
metadata: { [key: string]: unknown } | object;
        },"customer_discount": {
            id: string;
end: Date;
start: Date;
promotion_code: string;
checkout_session: string;
coupon_id: string;
customer_id: string;
subscription_id: string;
invoice_id: string;
invoice_item_id: string;
_fivetran_synced: Date;
        },"dispute": {
            id: string;
amount: string;
balance_transaction: string;
created: Date;
currency: string;
evidence_access_activity_log: string;
evidence_billing_address: string;
evidence_cancellation_policy: string;
evidence_cancellation_policy_disclosure: string;
evidence_cancellation_rebuttal: string;
evidence_customer_communication: string;
evidence_customer_email_address: string;
evidence_customer_name: string;
evidence_customer_purchase_ip: string;
evidence_customer_signature: string;
evidence_duplicate_charge_documentation: string;
evidence_duplicate_charge_explanation: string;
evidence_duplicate_charge_id: string;
evidence_product_description: string;
evidence_receipt: string;
evidence_refund_policy: string;
evidence_refund_policy_disclosure: string;
evidence_refund_refusal_explanation: string;
evidence_service_date: string;
evidence_service_documentation: string;
evidence_shipping_address: string;
evidence_shipping_carrier: string;
evidence_shipping_date: string;
evidence_shipping_documentation: string;
evidence_shipping_tracking_number: string;
evidence_uncategorized_file: string;
evidence_uncategorized_text: string;
evidence_details_due_by: Date;
evidence_details_has_evidence: boolean;
evidence_details_past_due: boolean;
evidence_details_submission_count: number;
is_charge_refundable: boolean;
livemode: boolean;
reason: string;
status: string;
charge_id: string;
_fivetran_synced: Date;
metadata: { [key: string]: unknown } | object;
connected_account_id: string;
        },"dispute_balance_transaction": {
            dispute_id: string;
balance_transaction_id: string;
_fivetran_synced: Date;
        },"early_fraud_warning": {
            id: string;
actionable: boolean;
created: Date;
fraud_type: string;
livemode: boolean;
charge_id: string;
_fivetran_synced: Date;
        },"fee": {
            balance_transaction_id: string;
index: number;
connected_account_id: string;
amount: string;
application: string;
currency: string;
description: string;
type: string;
_fivetran_synced: Date;
        },"file": {
            id: string;
created: Date;
filename: string;
purpose: string;
size: string;
title: string;
type: string;
url: string;
_fivetran_synced: Date;
        },"file_link": {
            id: string;
created: Date;
expired: boolean;
expires_at: Date;
livemode: boolean;
url: string;
file_id: string;
_fivetran_synced: Date;
metadata: { [key: string]: unknown } | object;
        },"fivetran_audit": {
            id: string;
message: string;
update_started: Date;
update_id: string;
schema: string;
table: string;
start: Date;
done: Date;
rows_updated_or_inserted: string;
status: string;
progress: Date;
_fivetran_synced: Date;
        },"fpx": {
            payment_method_id: string;
bank: string;
_fivetran_synced: Date;
        },"ideal": {
            payment_method_id: string;
bank: string;
bic: string;
_fivetran_synced: Date;
        },"invoice": {
            id: string;
amount_due: string;
amount_paid: string;
amount_remaining: string;
attempt_count: string;
attempted: boolean;
auto_advance: boolean;
billing: string;
billing_reason: string;
currency: string;
created: Date;
date: Date;
description: string;
due_date: Date;
ending_balance: string;
finalized_at: Date;
footer: string;
hosted_invoice_url: string;
invoice_pdf: string;
livemode: boolean;
next_payment_attempt: Date;
number: string;
paid: boolean;
period_start: Date;
period_end: Date;
receipt_number: string;
starting_balance: string;
statement_descriptor: string;
status: string;
subscription_proration_date: number;
subtotal: string;
tax: string;
tax_percent: string;
threshold_reason_amount_gte: string;
total: string;
webhooks_delivered_at: Date;
is_deleted: boolean;
application_fee_amount: string;
charge_id: string;
customer_id: string;
default_source_id: string;
_fivetran_synced: Date;
metadata: { [key: string]: unknown } | object;
status_transitions_voided_at: Date;
status_transitions_paid_at: Date;
status_transitions_marked_uncollectible_at: Date;
status_transitions_finalized_at: Date;
subscription_id: string;
default_payment_method_id: string;
payment_intent_id: string;
pre_payment_credit_notes_amount: number;
post_payment_credit_notes_amount: number;
        },"invoice_discount": {
            id: string;
end: Date;
start: Date;
promotion_code: string;
checkout_session: string;
coupon_id: string;
customer_id: string;
subscription_id: string;
invoice_id: string;
invoice_item_id: string;
_fivetran_synced: Date;
        },"invoice_item": {
            id: string;
amount: string;
currency: string;
date: Date;
description: string;
discountable: boolean;
livemode: boolean;
period_start: string;
period_end: string;
proration: boolean;
quantity: string;
unit_amount: string;
is_deleted: boolean;
customer_id: string;
invoice_id: string;
subscription_id: string;
subscription_item_id: string;
_fivetran_synced: Date;
metadata: { [key: string]: unknown } | object;
price_id: string;
plan_id: string;
        },"invoice_item_tax_rate": {
            invoice_item_id: string;
tax_rate_id: string;
_fivetran_synced: Date;
        },"invoice_line_item": {
            invoice_id: string;
amount: string;
currency: string;
description: string;
discountable: boolean;
livemode: boolean;
period_start: Date;
period_end: Date;
proration: boolean;
quantity: string;
type: string;
unique_id: string;
plan_id: string;
subscription_id: string;
subscription_item_id: string;
_fivetran_synced: Date;
metadata: { [key: string]: unknown } | object;
id: string;
price_id: string;
        },"invoice_tax_rate": {
            invoice_id: string;
tax_rate_id: string;
_fivetran_synced: Date;
        },"issuing_card": {
            id: string;
cancellation_reason: string;
brand: string;
cardholder_id: string;
created: Date;
currency: string;
exp_month: number;
exp_year: number;
last_4: string;
livemode: boolean;
name: string;
number: string;
replaced_by: string;
replacement_for: string;
replacement_reason: string;
shipping_address_city: string;
shipping_address_country: string;
shipping_address_line_1: string;
shipping_address_line_2: string;
shipping_address_postal_code: string;
shipping_address_state: string;
shipping_carrier: string;
shipping_eta: Date;
shipping_name: string;
shipping_service: string;
shipping_status: string;
shipping_tracking_number: string;
shipping_tracking_url: string;
shipping_type: string;
status: string;
type: string;
_fivetran_synced: Date;
metadata: { [key: string]: unknown } | object;
        },"issuing_dispute": {
            id: string;
amount: string;
created: Date;
currency: string;
evidence_fraudlent_dispute_explanation: string;
evidence_fraudlent_uncategorized_file: string;
evidence_other_dispute_explanation: string;
evidence_other_uncategorized_file: string;
livemode: boolean;
reason: string;
status: string;
_fivetran_synced: Date;
metadata: { [key: string]: unknown } | object;
        },"order": {
            id: string;
amount: string;
amount_returned: string;
application: string;
application_fee: string;
created: Date;
currency: string;
email: string;
external_coupon_code: string;
livemode: boolean;
selected_shipping_method: string;
shipping_address_city: string;
shipping_address_country: string;
shipping_address_line_1: string;
shipping_address_line_2: string;
shipping_address_postal_code: string;
shipping_address_state: string;
shipping_carrier: string;
shipping_name: string;
shipping_phone: string;
shipping_tracking_number: string;
status: string;
status_transitions_canceled: Date;
status_transitions_fulfilled: Date;
status_transitions_paid: Date;
status_transitions_returned: Date;
updated: Date;
upstream_id: string;
charge_id: string;
customer_id: string;
_fivetran_synced: Date;
metadata: { [key: string]: unknown } | object;
        },"order_item": {
            order_id: string;
index: number;
amount: string;
currency: string;
description: string;
quantity: string;
type: string;
sku_id: string;
_fivetran_synced: Date;
discount_id: string;
        },"order_return": {
            id: string;
amount: string;
created: Date;
currency: string;
livemode: boolean;
order_id: string;
refund_id: string;
_fivetran_synced: Date;
        },"order_return_item": {
            order_return_id: string;
index: number;
amount: string;
currency: string;
description: string;
quantity: string;
type: string;
sku_id: string;
_fivetran_synced: Date;
discount_id: string;
        },"payment_intent": {
            id: string;
amount: string;
amount_capturable: string;
amount_received: string;
application: string;
application_fee_amount: string;
canceled_at: Date;
cancellation_reason: string;
capture_method: string;
confirmation_method: string;
created: Date;
currency: string;
description: string;
last_payment_error_type: string;
last_payment_error_code: string;
last_payment_error_decline_code: string;
last_payment_error_doc_url: string;
last_payment_error_message: string;
last_payment_error_param: string;
last_payment_error_source_id: string;
last_payment_error_charge_id: string;
livemode: boolean;
on_behalf_of: string;
receipt_email: string;
statement_descriptor: string;
status: string;
transfer_data_destination: string;
transfer_group: string;
customer_id: string;
source_id: string;
payment_method_id: string;
_fivetran_synced: Date;
metadata: { [key: string]: unknown } | object;
payment_method_types: { [key: string]: unknown } | object;
connected_account_id: string;
        },"payment_method": {
            id: string;
billing_detail_address_city: string;
billing_detail_address_country: string;
billing_detail_address_line_1: string;
billing_detail_address_line_2: string;
billing_detail_address_postal_code: string;
billing_detail_address_state: string;
billing_detail_email: string;
billing_detail_name: string;
billing_detail_phone: string;
created: Date;
livemode: boolean;
type: string;
customer_id: string;
_fivetran_synced: Date;
metadata: { [key: string]: unknown } | object;
        },"payment_method_card": {
            payment_method_id: string;
description: string;
brand: string;
fingerprint: string;
funding: string;
type: string;
charge_id: string;
wallet_type: string;
_fivetran_synced: Date;
three_d_secure_usage_supported: boolean;
three_d_secure_version: string;
three_d_secure_authentication_flow: string;
three_d_secure_result: string;
three_d_secure_result_reason: string;
        },"payout": {
            id: string;
connected_account_id: string;
amount: string;
arrival_date: Date;
automatic: boolean;
created: Date;
currency: string;
description: string;
failure_code: string;
failure_message: string;
livemode: boolean;
method: string;
source_type: string;
statement_descriptor: string;
status: string;
type: string;
destination_bank_account_id: string;
destination_card_id: string;
balance_transaction_id: string;
failure_balance_transaction_id: string;
_fivetran_synced: Date;
metadata: { [key: string]: unknown } | object;
        },"person": {
            id: string;
account: string;
address_city: string;
address_country: string;
address_line_1: string;
address_line_2: string;
address_postal_code: string;
address_state: string;
address_kana_city: string;
address_kana_country: string;
address_kana_line_1: string;
address_kana_line_2: string;
address_kana_postal_code: string;
address_kana_state: string;
address_kana_town: string;
address_kanji_city: string;
address_kanji_country: string;
address_kanji_line_1: string;
address_kanji_line_2: string;
address_kanji_postal_code: string;
address_kanji_state: string;
address_kanji_town: string;
created: Date;
dob_day: number;
dob_month: number;
dob_year: number;
email: string;
first_name: string;
first_name_kana: string;
first_name_kanji: string;
gender: string;
id_number_provided: boolean;
last_name: string;
last_name_kana: string;
last_name_kanji: string;
maiden_name: string;
phone: string;
relationship_director: boolean;
relationship_executive: boolean;
relationship_owner: boolean;
relationship_percent_ownership: number;
relationship_representative: boolean;
relationship_title: string;
ssn_last_4_provided: boolean;
verification_additional_document_back: string;
verification_additional_document_details: string;
verification_additional_document_details_code: string;
verification_additional_document_front: string;
verification_details: string;
verification_details_code: string;
verification_document_back: string;
verification_document_details: string;
verification_document_details_code: string;
verification_document_front: string;
verification_status: string;
is_deleted: boolean;
_fivetran_synced: Date;
        },"phase": {
            subscription_schedule_id: string;
end_date: Date;
start_date: Date;
application_fee_percent: number;
billing_thresholds_amount_gte: string;
billing_thresholds_reset_billing_cycle_anchor: boolean;
collection_method: string;
default_payment_method: string;
invoice_settings_days_until_due: string;
tax_percent: number;
trial_end: Date;
coupon_id: string;
_fivetran_synced: Date;
        },"phase_plan": {
            subscription_schedule_id: string;
end_date: Date;
start_date: Date;
quantity: string;
plan_id: string;
_fivetran_synced: Date;
        },"plan": {
            id: string;
active: boolean;
aggregate_usage: string;
amount: string;
billing_scheme: string;
created: Date;
currency: string;
interval: string;
interval_count: string;
livemode: boolean;
nickname: string;
tiers_mode: string;
transform_usage_divide_by: number;
transform_usage_round: string;
trial_period_days: number;
usage_type: string;
is_deleted: boolean;
product_id: string;
_fivetran_synced: Date;
metadata: { [key: string]: unknown } | object;
        },"price": {
            id: string;
active: boolean;
currency: string;
nickname: string;
recurring_aggregate_usage: string;
recurring_interval: string;
recurring_interval_count: number;
recurring_usage_type: string;
type: string;
unit_amount: number;
billing_scheme: string;
created: Date;
livemode: boolean;
lookup_key: string;
tiers_mode: string;
transform_quantity_divide_by: number;
transform_quantity_round: string;
unit_amount_decimal: string;
is_deleted: boolean;
product_id: string;
_fivetran_synced: Date;
metadata: { [key: string]: unknown } | object;
        },"product": {
            id: string;
active: boolean;
caption: string;
created: Date;
description: string;
livemode: boolean;
name: string;
package_dimensions_height: number;
package_dimensions_length: number;
package_dimensions_weight: number;
package_dimensions_width: number;
shippable: boolean;
statement_descriptor: string;
type: string;
unit_label: string;
updated: Date;
url: string;
is_deleted: boolean;
_fivetran_synced: Date;
metadata: { [key: string]: unknown } | object;
        },"promotion_code": {
            id: string;
metadata: { [key: string]: unknown } | object;
created: Date;
expires_at: Date;
code: string;
max_redemptions: number;
times_redeemed: number;
active: boolean;
livemode: boolean;
first_time_transaction: boolean;
minimum_amount: number;
minimum_amount_currency: string;
coupon_id: string;
customer_id: string;
_fivetran_synced: Date;
        },"refund": {
            id: string;
amount: string;
created: Date;
currency: string;
description: string;
failure_reason: string;
reason: string;
receipt_number: string;
status: string;
balance_transaction_id: string;
charge_id: string;
failure_balance_transaction_id: string;
_fivetran_synced: Date;
metadata: { [key: string]: unknown } | object;
payment_intent_id: string;
connected_account_id: string;
        },"review": {
            id: string;
billing_zip: string;
closed_reason: string;
created: Date;
ip_address: string;
ip_address_location_city: string;
ip_address_location_country: string;
ip_address_location_latitude: number;
ip_address_location_longitude: number;
ip_address_location_region: string;
livemode: boolean;
open: boolean;
opened_reason: string;
reason: string;
session_browser: string;
session_device: string;
session_platform: string;
session_version: string;
charge_id: string;
payment_intent_id: string;
_fivetran_synced: Date;
        },"sepa_debit": {
            payment_method_id: string;
bank_code: string;
branch_code: string;
country: string;
fingerprint: string;
last_4: string;
_fivetran_synced: Date;
        },"setup_attempt": {
            id: string;
on_behalf_of: string;
application: string;
created: Date;
livemode: boolean;
setup_error: string;
status: string;
usage: string;
setup_intent_id: string;
default_payment_method_id: string;
_fivetran_synced: Date;
setup_error_decline_code: string;
setup_error_type: string;
setup_error_message: string;
setup_error_code: string;
setup_error_doc_url: string;
        },"setup_intent": {
            id: string;
description: string;
status: string;
usage: string;
application: string;
cancellation_reason: string;
created: Date;
livemode: boolean;
mandate: string;
on_behalf_of: string;
single_use_mandate: string;
payment_method_id: string;
customer_id: string;
_fivetran_synced: Date;
metadata: { [key: string]: unknown } | object;
        },"shipping_method": {
            id: string;
order_id: string;
amount: string;
currency: string;
delivery_estimate_date: string;
delivery_estimate_earliest: string;
delivery_estimate_latest: string;
delivery_estimate_type: string;
description: string;
_fivetran_synced: Date;
        },"sku": {
            id: string;
active: boolean;
created: Date;
currency: string;
image: string;
inventory_quantity: number;
inventory_type: string;
inventory_value: string;
livemode: boolean;
package_dimensions_height: number;
package_dimensions_length: number;
package_dimensions_weight: number;
package_dimensions_width: number;
price: number;
updated: Date;
is_deleted: boolean;
product_id: string;
_fivetran_synced: Date;
metadata: { [key: string]: unknown } | object;
        },"source": {
            id: string;
connected_account_id: string;
amount: string;
code_verificationattempts_remaining: string;
code_verificationstatus: string;
created: Date;
currency: string;
flow: string;
livemode: boolean;
owner_address_city: string;
owner_address_country: string;
owner_address_line_1: string;
owner_address_line_2: string;
owner_address_postal_code: string;
owner_address_state: string;
owner_email: string;
owner_name: string;
owner_phone: string;
owner_verified_address_city: string;
owner_verified_address_country: string;
owner_verified_address_line_1: string;
owner_verified_address_line_2: string;
owner_verified_address_postal_code: string;
owner_verified_address_state: string;
owner_verified_email: string;
owner_verified_name: string;
owner_verified_phone: string;
receiver_address: string;
receiver_amount_charged: string;
receiver_amount_received: string;
receiver_amount_returned: string;
redirect_failure_reason: string;
redirect_return_url: string;
redirect_status: string;
redirect_url: string;
statement_descriptor: string;
status: string;
type: string;
usage: string;
customer_id: string;
_fivetran_synced: Date;
metadata: { [key: string]: unknown } | object;
        },"subscription": {
            id: string;
application_fee_percent: number;
billing: string;
billing_cycle_anchor: Date;
billing_threshold_reset_billing_cycle_anchor: boolean;
billing_threshold_amount_gte: string;
cancel_at: Date;
cancel_at_period_end: boolean;
canceled_at: Date;
created: Date;
current_period_end: Date;
current_period_start: Date;
days_until_due: string;
ended_at: Date;
livemode: boolean;
quantity: string;
start: Date;
start_date: Date;
status: string;
tax_percent: number;
trial_start: Date;
trial_end: Date;
customer_id: string;
default_source_id: string;
_fivetran_synced: Date;
metadata: { [key: string]: unknown } | object;
default_payment_method_id: string;
pending_setup_intent_id: string;
latest_invoice_id: string;
pause_collection_resumes_at: Date;
pause_collection_behavior: string;
        },"subscription_discount": {
            id: string;
end: Date;
start: Date;
promotion_code: string;
checkout_session: string;
coupon_id: string;
customer_id: string;
subscription_id: string;
invoice_id: string;
invoice_item_id: string;
_fivetran_synced: Date;
        },"subscription_item": {
            id: string;
billing_thresholds_reset_billing_cycle_anchor: boolean;
billing_thresholds_amount_gte: string;
created: Date;
quantity: number;
plan_id: string;
subscription_id: string;
_fivetran_synced: Date;
metadata: { [key: string]: unknown } | object;
        },"subscription_schedule": {
            id: string;
canceled_at: Date;
completed_at: Date;
created: Date;
current_phase_start_date: Date;
current_phase_end_date: Date;
default_settings_collection_method: string;
default_settings_default_payment_method: string;
default_settings_invoice_settings_days_until_due: string;
default_settings_billing_thresholds_amount_gte: string;
default_settings_billing_thresholds_reset_billing_cycle_anchor: boolean;
end_behavior: string;
livemode: boolean;
released_at: Date;
released_subscription: string;
status: string;
customer_id: string;
subscription_id: string;
_fivetran_synced: Date;
metadata: { [key: string]: unknown } | object;
        },"subscription_tax_rate": {
            subscription_id: string;
tax_rate_id: string;
_fivetran_synced: Date;
        },"tax_rate": {
            id: string;
active: boolean;
created: Date;
description: string;
display_name: string;
inclusive: boolean;
jurisdiction: string;
livemode: boolean;
percentage: number;
_fivetran_synced: Date;
metadata: { [key: string]: unknown } | object;
        },"tax_rate_invoice_item_mapping": {
            invoice_item_id: string;
tax_rate_id: string;
_fivetran_synced: Date;
        },"tax_rate_invoice_mapping": {
            invoice_id: string;
tax_rate_id: string;
_fivetran_synced: Date;
        },"tax_rate_subscription_mapping": {
            subscription_id: string;
tax_rate_id: string;
_fivetran_synced: Date;
        },"tier": {
            id: string;
index: number;
flat_amount: string;
unit_amount: string;
up_to: string;
_fivetran_synced: Date;
        },"topup": {
            id: string;
amount: string;
created: Date;
currency: string;
description: string;
expected_availability_date: Date;
failure_code: string;
failure_message: string;
livemode: boolean;
statement_descriptor: string;
status: string;
transfer_group: string;
source_id: string;
balance_transaction_id: string;
_fivetran_synced: Date;
metadata: { [key: string]: unknown } | object;
        },"transaction": {
            id: string;
amount: string;
cardholder: string;
created: Date;
currency: string;
livemode: boolean;
type: string;
authorization_id: string;
balance_transaction_id: string;
card_id: string;
dispute_id: string;
_fivetran_synced: Date;
metadata: { [key: string]: unknown } | object;
amount_details_atm_fee: number;
        },"transfer": {
            id: string;
amount: string;
amount_reversed: string;
created: Date;
currency: string;
description: string;
destination: string;
destination_payment: string;
livemode: string;
reversed: boolean;
source_transaction: string;
source_type: string;
transfer_group: string;
balance_transaction_id: string;
_fivetran_synced: Date;
metadata: { [key: string]: unknown } | object;
destination_payment_id: string;
source_transaction_id: string;
        },"transfer_reversal": {
            id: string;
amount: string;
created: Date;
currency: string;
destination_payment_refund: string;
balance_transaction_id: string;
source_refund_id: string;
transfer_id: string;
_fivetran_synced: Date;
metadata: { [key: string]: unknown } | object;
        },"usage_record": {
            id: string;
timestamp: Date;
period_start: string;
period_end: string;
total_usage: string;
livemode: boolean;
invoice_id: string;
subscription_item_id: string;
_fivetran_synced: Date;
        }
    },"ticket_templates": {
      "ticket_templates": {
            id: string;
type: string;
schema: { [key: string]: unknown } | object;
deprecated_at: Date;
inserted_at: Date;
updated_at: Date;
        }
    }
};
